/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * Fast_MPCV20_form_Step2.cpp
 *
 * Code generation for function 'Fast_MPCV20_form_Step2'
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "Fast_MPCV20_form_Step2.h"
#include "Fast_MPCV20_form_Step2_emxutil.h"
#include "IqFast_LeftStart2V20.h"
#include "EqFast_LeftStart2V20.h"

/* Variable Definitions */
static emlrtRSInfo emlrtRSI = { 56,    /* lineNo */
  "Fast_MPCV20_form_Step2",            /* fcnName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step2.m"/* pathName */
};

static emlrtRSInfo b_emlrtRSI = { 63,  /* lineNo */
  "Fast_MPCV20_form_Step2",            /* fcnName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step2.m"/* pathName */
};

static emlrtRTEInfo emlrtRTEI = { 1,   /* lineNo */
  34,                                  /* colNo */
  "Fast_MPCV20_form_Step2",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step2.m"/* pName */
};

static emlrtRTEInfo b_emlrtRTEI = { 41,/* lineNo */
  1,                                   /* colNo */
  "Fast_MPCV20_form_Step2",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step2.m"/* pName */
};

static emlrtBCInfo emlrtBCI = { -1,    /* iFirst */
  -1,                                  /* iLast */
  24,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo b_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  23,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  22,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo d_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  21,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo e_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  20,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo f_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  19,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo g_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  18,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo h_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  17,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart2V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart2V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo emlrtDCI = { 41,    /* lineNo */
  20,                                  /* colNo */
  "Fast_MPCV20_form_Step2",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step2.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo b_emlrtDCI = { 41,  /* lineNo */
  20,                                  /* colNo */
  "Fast_MPCV20_form_Step2",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step2.m",/* pName */
  4                                    /* checkKind */
};

/* Function Definitions */
void Fast_MPCV20_form_Step2(Fast_MPCV20_form_Step2StackData *SD, const
  emlrtStack *sp, const real_T states[6], real_T Nodes, const real_T r[3], const
  real_T qo[4], const real_T states_ref[10], const real_T MPC_index[2], const
  real_T weights[10], const real_T foot_info[8], const real_T Obs_Info[4],
  real_T Aeq[12160], real_T beq[76], real_T Aiq[19040], real_T biq[119], real_T
  H[25600], real_T f[160])
{
  static const real_T dv0[12160] = { -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0,
    -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0,
    -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
    -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0 };

  emxArray_real_T *r1;
  int32_T i0;
  int32_T loop_ub;
  real_T r2[17];
  real_T t2;
  real_T t3;
  real_T t4;
  real_T t5;
  real_T t6;
  real_T t7;
  real_T t8;
  real_T t9;
  real_T t10;
  real_T t11;
  real_T t12;
  real_T t13;
  real_T t14;
  real_T t15;
  real_T t16;
  emlrtStack st;
  st.prev = sp;
  st.tls = sp->tls;
  emlrtHeapReferenceStackEnterFcnR2012b(sp);
  memcpy(&Aeq[0], &dv0[0], 12160U * sizeof(real_T));
  emxInit_real_T(sp, &r1, 2, &b_emlrtRTEI, true);

  /* TEMP_MPC_FORM Summary of this function goes here */
  /*    Detailed explanation goes here */
  /*    This function formulates all the matrices for MPC QP */
  /*    states: current robot states, include CoM states and foot placement */
  /*    Nodes: Number of nodes in MPC prediction */
  /*    r: radius for obstacle avoidance */
  /*    qo: obstacle states */
  /*    states_ref: desired robot states */
  /*    MPC_index : left/right step index, contact sequence index */
  /*    weights   : weight in the MPC cost function */
  /*  unpack inputs */
  i0 = r1->size[0] * r1->size[1];
  r1->size[0] = 1;
  if (!(Nodes >= 0.0)) {
    emlrtNonNegativeCheckR2012b(Nodes, (emlrtDCInfo *)&b_emlrtDCI, sp);
  }

  if (Nodes != (int32_T)muDoubleScalarFloor(Nodes)) {
    emlrtIntegerCheckR2012b(Nodes, (emlrtDCInfo *)&emlrtDCI, sp);
  }

  r1->size[1] = (int32_T)Nodes;
  emxEnsureCapacity_real_T(sp, r1, i0, &emlrtRTEI);
  if (!(Nodes >= 0.0)) {
    emlrtNonNegativeCheckR2012b(Nodes, (emlrtDCInfo *)&b_emlrtDCI, sp);
  }

  if (Nodes != (int32_T)muDoubleScalarFloor(Nodes)) {
    emlrtIntegerCheckR2012b(Nodes, (emlrtDCInfo *)&emlrtDCI, sp);
  }

  loop_ub = (int32_T)Nodes;
  for (i0 = 0; i0 < loop_ub; i0++) {
    r1->data[i0] = r[0];
  }

  for (i0 = 0; i0 < 8; i0++) {
    r2[i0] = r[1];
  }

  for (i0 = 0; i0 < 9; i0++) {
    r2[i0 + 8] = r[2];
  }

  /*  [Aeq,beq] = EqualityConstraints_LeftStartV4(CoM_x,CoM_y); */
  /*  [Aiq,biq] = InequalityConstraints_LeftStartV4(CoM_x, CoM_y, qo, r1, r2, ob_cost ,CP_x,CP_y,foot_dis); */
  /*   */
  /*  % Develop The Objective Function Matrix and Vector */
  /*  [H,f] = ObjectiveFunction_LeftStart0V4(CP_x,CP_y,vel_des(1), vel_des(2),Qx,Qy,cRx,cRy,cWx,cWy); */
  if (MPC_index[0] == 1.0) {
    /*  Develop the Constraints Matrix and Vector */
    EqFast_LeftStart2V20(*(real_T (*)[2])&states[0], *(real_T (*)[2])&states[2],
                         states[4], states[5], *(real_T (*)[3])&foot_info[0],
                         *(real_T (*)[3])&foot_info[3], beq);
    st.site = &emlrtRSI;
    IqFast_LeftStart2V20(&st, qo, r1, r2, states[4], states[5], *(real_T (*)[3])
                         &foot_info[0], *(real_T (*)[3])&foot_info[3], *(real_T
      (*)[2])&foot_info[6], Obs_Info, Aiq, biq);

    /*  Develop The Objective Function Matrix and Vector */
    /* OBJFAST_LEFTSTART2V20 */
    /*     [H,F] = OBJFAST_LEFTSTART2V20(CPX1,CPY1,IN3,IN4,IN5,IN6,CRX1,CRY1,CWX1,IN10,M1,IN12) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:21:38 */
    t2 = weights[1] * 2.0;
    t3 = weights[2] * 2.0;
    t4 = weights[3] * 2.0;
    t5 = weights[4] * 2.0;
    t6 = weights[5] * 2.0;
    t7 = weights[6] * 2.0;
    t8 = weights[5] * 22.0;
    t9 = weights[5] * 14.0;
    t10 = weights[5] * 6.0;
    t11 = weights[6] * 22.0;
    t12 = weights[6] * 14.0;
    t13 = weights[6] * 6.0;
    t14 = weights[0] * 2.0;
    t15 = weights[7] * 2.0;
    t16 = weights[9] * 2.0;
    SD->f0.t2[0] = t2;
    memset(&SD->f0.t2[1], 0, 321U * sizeof(real_T));
    SD->f0.t2[322] = t2;
    memset(&SD->f0.t2[323], 0, 321U * sizeof(real_T));
    SD->f0.t2[644] = t2;
    memset(&SD->f0.t2[645], 0, 160U * sizeof(real_T));
    SD->f0.t2[805] = t3;
    memset(&SD->f0.t2[806], 0, 160U * sizeof(real_T));
    SD->f0.t2[966] = t2;
    memset(&SD->f0.t2[967], 0, 321U * sizeof(real_T));
    SD->f0.t2[1288] = t2;
    memset(&SD->f0.t2[1289], 0, 321U * sizeof(real_T));
    SD->f0.t2[1610] = t2;
    memset(&SD->f0.t2[1611], 0, 321U * sizeof(real_T));
    SD->f0.t2[1932] = t2;
    memset(&SD->f0.t2[1933], 0, 160U * sizeof(real_T));
    SD->f0.t2[2093] = t3;
    memset(&SD->f0.t2[2094], 0, 160U * sizeof(real_T));
    SD->f0.t2[2254] = t2;
    memset(&SD->f0.t2[2255], 0, 321U * sizeof(real_T));
    SD->f0.t2[2576] = t2;
    memset(&SD->f0.t2[2577], 0, 321U * sizeof(real_T));
    SD->f0.t2[2898] = t2;
    memset(&SD->f0.t2[2899], 0, 321U * sizeof(real_T));
    SD->f0.t2[3220] = t2;
    memset(&SD->f0.t2[3221], 0, 160U * sizeof(real_T));
    SD->f0.t2[3381] = t3;
    memset(&SD->f0.t2[3382], 0, 160U * sizeof(real_T));
    SD->f0.t2[3542] = t2;
    memset(&SD->f0.t2[3543], 0, 321U * sizeof(real_T));
    SD->f0.t2[3864] = t2;
    memset(&SD->f0.t2[3865], 0, 321U * sizeof(real_T));
    SD->f0.t2[4186] = t2;
    memset(&SD->f0.t2[4187], 0, 321U * sizeof(real_T));
    SD->f0.t2[4508] = t2;
    memset(&SD->f0.t2[4509], 0, 160U * sizeof(real_T));
    SD->f0.t2[4669] = t3;
    memset(&SD->f0.t2[4670], 0, 160U * sizeof(real_T));
    SD->f0.t2[4830] = t2;
    memset(&SD->f0.t2[4831], 0, 321U * sizeof(real_T));
    SD->f0.t2[5152] = t2;
    memset(&SD->f0.t2[5153], 0, 321U * sizeof(real_T));
    SD->f0.t2[5474] = t4;
    memset(&SD->f0.t2[5475], 0, 321U * sizeof(real_T));
    SD->f0.t2[5796] = t4;
    memset(&SD->f0.t2[5797], 0, 321U * sizeof(real_T));
    SD->f0.t2[6118] = t4;
    memset(&SD->f0.t2[6119], 0, 160U * sizeof(real_T));
    SD->f0.t2[6279] = t5;
    memset(&SD->f0.t2[6280], 0, 160U * sizeof(real_T));
    SD->f0.t2[6440] = t4;
    memset(&SD->f0.t2[6441], 0, 321U * sizeof(real_T));
    SD->f0.t2[6762] = t4;
    memset(&SD->f0.t2[6763], 0, 321U * sizeof(real_T));
    SD->f0.t2[7084] = t4;
    memset(&SD->f0.t2[7085], 0, 321U * sizeof(real_T));
    SD->f0.t2[7406] = t4;
    memset(&SD->f0.t2[7407], 0, 160U * sizeof(real_T));
    SD->f0.t2[7567] = t5;
    memset(&SD->f0.t2[7568], 0, 160U * sizeof(real_T));
    SD->f0.t2[7728] = t4;
    memset(&SD->f0.t2[7729], 0, 321U * sizeof(real_T));
    SD->f0.t2[8050] = t4;
    memset(&SD->f0.t2[8051], 0, 321U * sizeof(real_T));
    SD->f0.t2[8372] = t4;
    memset(&SD->f0.t2[8373], 0, 321U * sizeof(real_T));
    SD->f0.t2[8694] = t4;
    memset(&SD->f0.t2[8695], 0, 160U * sizeof(real_T));
    SD->f0.t2[8855] = t5;
    memset(&SD->f0.t2[8856], 0, 160U * sizeof(real_T));
    SD->f0.t2[9016] = t4;
    memset(&SD->f0.t2[9017], 0, 321U * sizeof(real_T));
    SD->f0.t2[9338] = t4;
    memset(&SD->f0.t2[9339], 0, 321U * sizeof(real_T));
    SD->f0.t2[9660] = t4;
    memset(&SD->f0.t2[9661], 0, 321U * sizeof(real_T));
    SD->f0.t2[9982] = t4;
    memset(&SD->f0.t2[9983], 0, 160U * sizeof(real_T));
    SD->f0.t2[10143] = t5;
    memset(&SD->f0.t2[10144], 0, 160U * sizeof(real_T));
    SD->f0.t2[10304] = t4;
    memset(&SD->f0.t2[10305], 0, 321U * sizeof(real_T));
    SD->f0.t2[10626] = t4;
    memset(&SD->f0.t2[10627], 0, 643U * sizeof(real_T));
    SD->f0.t2[11270] = t6;
    memset(&SD->f0.t2[11271], 0, 31U * sizeof(real_T));
    SD->f0.t2[11302] = -t6;
    memset(&SD->f0.t2[11303], 0, sizeof(real_T) << 7);
    SD->f0.t2[11431] = t6;
    memset(&SD->f0.t2[11432], 0, 30U * sizeof(real_T));
    SD->f0.t2[11462] = -t6;
    memset(&SD->f0.t2[11463], 0, 129U * sizeof(real_T));
    SD->f0.t2[11592] = t6;
    memset(&SD->f0.t2[11593], 0, 29U * sizeof(real_T));
    SD->f0.t2[11622] = -t6;
    memset(&SD->f0.t2[11623], 0, 130U * sizeof(real_T));
    SD->f0.t2[11753] = t6;
    memset(&SD->f0.t2[11754], 0, 28U * sizeof(real_T));
    SD->f0.t2[11782] = -t6;
    memset(&SD->f0.t2[11783], 0, 131U * sizeof(real_T));
    SD->f0.t2[11914] = t6;
    memset(&SD->f0.t2[11915], 0, 27U * sizeof(real_T));
    SD->f0.t2[11942] = -t6;
    SD->f0.t2[11943] = -t6;
    memset(&SD->f0.t2[11944], 0, 131U * sizeof(real_T));
    SD->f0.t2[12075] = t6;
    memset(&SD->f0.t2[12076], 0, 26U * sizeof(real_T));
    SD->f0.t2[12102] = -t6;
    SD->f0.t2[12103] = -t6;
    memset(&SD->f0.t2[12104], 0, 132U * sizeof(real_T));
    SD->f0.t2[12236] = t6;
    memset(&SD->f0.t2[12237], 0, 25U * sizeof(real_T));
    SD->f0.t2[12262] = -t6;
    SD->f0.t2[12263] = -t6;
    memset(&SD->f0.t2[12264], 0, 133U * sizeof(real_T));
    SD->f0.t2[12397] = t6;
    memset(&SD->f0.t2[12398], 0, 24U * sizeof(real_T));
    SD->f0.t2[12422] = -t6;
    SD->f0.t2[12423] = -t6;
    memset(&SD->f0.t2[12424], 0, 134U * sizeof(real_T));
    SD->f0.t2[12558] = t6;
    memset(&SD->f0.t2[12559], 0, 23U * sizeof(real_T));
    SD->f0.t2[12582] = -t6;
    SD->f0.t2[12583] = -t6;
    SD->f0.t2[12584] = -t6;
    memset(&SD->f0.t2[12585], 0, 134U * sizeof(real_T));
    SD->f0.t2[12719] = t6;
    memset(&SD->f0.t2[12720], 0, 22U * sizeof(real_T));
    SD->f0.t2[12742] = -t6;
    SD->f0.t2[12743] = -t6;
    SD->f0.t2[12744] = -t6;
    memset(&SD->f0.t2[12745], 0, 135U * sizeof(real_T));
    SD->f0.t2[12880] = t6;
    memset(&SD->f0.t2[12881], 0, 21U * sizeof(real_T));
    SD->f0.t2[12902] = -t6;
    SD->f0.t2[12903] = -t6;
    SD->f0.t2[12904] = -t6;
    memset(&SD->f0.t2[12905], 0, 136U * sizeof(real_T));
    SD->f0.t2[13041] = t6;
    memset(&SD->f0.t2[13042], 0, 20U * sizeof(real_T));
    SD->f0.t2[13062] = -t6;
    SD->f0.t2[13063] = -t6;
    SD->f0.t2[13064] = -t6;
    memset(&SD->f0.t2[13065], 0, 137U * sizeof(real_T));
    SD->f0.t2[13202] = t6;
    memset(&SD->f0.t2[13203], 0, 19U * sizeof(real_T));
    SD->f0.t2[13222] = -t6;
    SD->f0.t2[13223] = -t6;
    SD->f0.t2[13224] = -t6;
    SD->f0.t2[13225] = -t6;
    memset(&SD->f0.t2[13226], 0, 137U * sizeof(real_T));
    SD->f0.t2[13363] = t6;
    memset(&SD->f0.t2[13364], 0, 18U * sizeof(real_T));
    SD->f0.t2[13382] = -t6;
    SD->f0.t2[13383] = -t6;
    SD->f0.t2[13384] = -t6;
    SD->f0.t2[13385] = -t6;
    memset(&SD->f0.t2[13386], 0, 138U * sizeof(real_T));
    SD->f0.t2[13524] = t6;
    memset(&SD->f0.t2[13525], 0, 17U * sizeof(real_T));
    SD->f0.t2[13542] = -t6;
    SD->f0.t2[13543] = -t6;
    SD->f0.t2[13544] = -t6;
    SD->f0.t2[13545] = -t6;
    memset(&SD->f0.t2[13546], 0, 461U * sizeof(real_T));
    SD->f0.t2[14007] = t7;
    memset(&SD->f0.t2[14008], 0, 18U * sizeof(real_T));
    SD->f0.t2[14026] = -t7;
    memset(&SD->f0.t2[14027], 0, 141U * sizeof(real_T));
    SD->f0.t2[14168] = t7;
    memset(&SD->f0.t2[14169], 0, 17U * sizeof(real_T));
    SD->f0.t2[14186] = -t7;
    memset(&SD->f0.t2[14187], 0, 142U * sizeof(real_T));
    SD->f0.t2[14329] = t7;
    memset(&SD->f0.t2[14330], 0, sizeof(real_T) << 4);
    SD->f0.t2[14346] = -t7;
    memset(&SD->f0.t2[14347], 0, 143U * sizeof(real_T));
    SD->f0.t2[14490] = t7;
    memset(&SD->f0.t2[14491], 0, 15U * sizeof(real_T));
    SD->f0.t2[14506] = -t7;
    memset(&SD->f0.t2[14507], 0, 144U * sizeof(real_T));
    SD->f0.t2[14651] = t7;
    memset(&SD->f0.t2[14652], 0, 14U * sizeof(real_T));
    SD->f0.t2[14666] = -t7;
    SD->f0.t2[14667] = -t7;
    memset(&SD->f0.t2[14668], 0, 144U * sizeof(real_T));
    SD->f0.t2[14812] = t7;
    memset(&SD->f0.t2[14813], 0, 13U * sizeof(real_T));
    SD->f0.t2[14826] = -t7;
    SD->f0.t2[14827] = -t7;
    memset(&SD->f0.t2[14828], 0, 145U * sizeof(real_T));
    SD->f0.t2[14973] = t7;
    memset(&SD->f0.t2[14974], 0, 12U * sizeof(real_T));
    SD->f0.t2[14986] = -t7;
    SD->f0.t2[14987] = -t7;
    memset(&SD->f0.t2[14988], 0, 146U * sizeof(real_T));
    SD->f0.t2[15134] = t7;
    memset(&SD->f0.t2[15135], 0, 11U * sizeof(real_T));
    SD->f0.t2[15146] = -t7;
    SD->f0.t2[15147] = -t7;
    memset(&SD->f0.t2[15148], 0, 147U * sizeof(real_T));
    SD->f0.t2[15295] = t7;
    memset(&SD->f0.t2[15296], 0, 10U * sizeof(real_T));
    SD->f0.t2[15306] = -t7;
    SD->f0.t2[15307] = -t7;
    SD->f0.t2[15308] = -t7;
    memset(&SD->f0.t2[15309], 0, 147U * sizeof(real_T));
    SD->f0.t2[15456] = t7;
    memset(&SD->f0.t2[15457], 0, 9U * sizeof(real_T));
    SD->f0.t2[15466] = -t7;
    SD->f0.t2[15467] = -t7;
    SD->f0.t2[15468] = -t7;
    memset(&SD->f0.t2[15469], 0, 148U * sizeof(real_T));
    SD->f0.t2[15617] = t7;
    memset(&SD->f0.t2[15618], 0, sizeof(real_T) << 3);
    SD->f0.t2[15626] = -t7;
    SD->f0.t2[15627] = -t7;
    SD->f0.t2[15628] = -t7;
    memset(&SD->f0.t2[15629], 0, 149U * sizeof(real_T));
    SD->f0.t2[15778] = t7;
    SD->f0.t2[15779] = 0.0;
    SD->f0.t2[15780] = 0.0;
    SD->f0.t2[15781] = 0.0;
    SD->f0.t2[15782] = 0.0;
    SD->f0.t2[15783] = 0.0;
    SD->f0.t2[15784] = 0.0;
    SD->f0.t2[15785] = 0.0;
    SD->f0.t2[15786] = -t7;
    SD->f0.t2[15787] = -t7;
    SD->f0.t2[15788] = -t7;
    memset(&SD->f0.t2[15789], 0, 150U * sizeof(real_T));
    SD->f0.t2[15939] = t7;
    SD->f0.t2[15940] = 0.0;
    SD->f0.t2[15941] = 0.0;
    SD->f0.t2[15942] = 0.0;
    SD->f0.t2[15943] = 0.0;
    SD->f0.t2[15944] = 0.0;
    SD->f0.t2[15945] = 0.0;
    SD->f0.t2[15946] = -t7;
    SD->f0.t2[15947] = -t7;
    SD->f0.t2[15948] = -t7;
    SD->f0.t2[15949] = -t7;
    memset(&SD->f0.t2[15950], 0, 150U * sizeof(real_T));
    SD->f0.t2[16100] = t7;
    SD->f0.t2[16101] = 0.0;
    SD->f0.t2[16102] = 0.0;
    SD->f0.t2[16103] = 0.0;
    SD->f0.t2[16104] = 0.0;
    SD->f0.t2[16105] = 0.0;
    SD->f0.t2[16106] = -t7;
    SD->f0.t2[16107] = -t7;
    SD->f0.t2[16108] = -t7;
    SD->f0.t2[16109] = -t7;
    memset(&SD->f0.t2[16110], 0, 151U * sizeof(real_T));
    SD->f0.t2[16261] = t7;
    SD->f0.t2[16262] = 0.0;
    SD->f0.t2[16263] = 0.0;
    SD->f0.t2[16264] = 0.0;
    SD->f0.t2[16265] = 0.0;
    SD->f0.t2[16266] = -t7;
    SD->f0.t2[16267] = -t7;
    SD->f0.t2[16268] = -t7;
    SD->f0.t2[16269] = -t7;
    memset(&SD->f0.t2[16270], 0, 120U * sizeof(real_T));
    SD->f0.t2[16390] = -t6;
    SD->f0.t2[16391] = -t6;
    SD->f0.t2[16392] = -t6;
    SD->f0.t2[16393] = -t6;
    SD->f0.t2[16394] = -t6;
    SD->f0.t2[16395] = -t6;
    SD->f0.t2[16396] = -t6;
    SD->f0.t2[16397] = -t6;
    SD->f0.t2[16398] = -t6;
    SD->f0.t2[16399] = -t6;
    SD->f0.t2[16400] = -t6;
    SD->f0.t2[16401] = -t6;
    SD->f0.t2[16402] = -t6;
    SD->f0.t2[16403] = -t6;
    SD->f0.t2[16404] = -t6;
    memset(&SD->f0.t2[16405], 0, 17U * sizeof(real_T));
    SD->f0.t2[16422] = weights[5] * 30.0;
    SD->f0.t2[16423] = t8;
    SD->f0.t2[16424] = t9;
    SD->f0.t2[16425] = t10;
    memset(&SD->f0.t2[16426], 0, sizeof(real_T) << 7);
    SD->f0.t2[16554] = -t6;
    SD->f0.t2[16555] = -t6;
    SD->f0.t2[16556] = -t6;
    SD->f0.t2[16557] = -t6;
    SD->f0.t2[16558] = -t6;
    SD->f0.t2[16559] = -t6;
    SD->f0.t2[16560] = -t6;
    SD->f0.t2[16561] = -t6;
    SD->f0.t2[16562] = -t6;
    SD->f0.t2[16563] = -t6;
    SD->f0.t2[16564] = -t6;
    memset(&SD->f0.t2[16565], 0, 17U * sizeof(real_T));
    SD->f0.t2[16582] = t8;
    SD->f0.t2[16583] = t8;
    SD->f0.t2[16584] = t9;
    SD->f0.t2[16585] = t10;
    memset(&SD->f0.t2[16586], 0, 132U * sizeof(real_T));
    SD->f0.t2[16718] = -t6;
    SD->f0.t2[16719] = -t6;
    SD->f0.t2[16720] = -t6;
    SD->f0.t2[16721] = -t6;
    SD->f0.t2[16722] = -t6;
    SD->f0.t2[16723] = -t6;
    SD->f0.t2[16724] = -t6;
    memset(&SD->f0.t2[16725], 0, 17U * sizeof(real_T));
    SD->f0.t2[16742] = t9;
    SD->f0.t2[16743] = t9;
    SD->f0.t2[16744] = t9;
    SD->f0.t2[16745] = t10;
    memset(&SD->f0.t2[16746], 0, 136U * sizeof(real_T));
    SD->f0.t2[16882] = -t6;
    SD->f0.t2[16883] = -t6;
    SD->f0.t2[16884] = -t6;
    memset(&SD->f0.t2[16885], 0, 17U * sizeof(real_T));
    SD->f0.t2[16902] = t10;
    SD->f0.t2[16903] = t10;
    SD->f0.t2[16904] = t10;
    SD->f0.t2[16905] = t10;
    memset(&SD->f0.t2[16906], 0, 141U * sizeof(real_T));
    SD->f0.t2[17047] = -t7;
    SD->f0.t2[17048] = -t7;
    SD->f0.t2[17049] = -t7;
    SD->f0.t2[17050] = -t7;
    SD->f0.t2[17051] = -t7;
    SD->f0.t2[17052] = -t7;
    SD->f0.t2[17053] = -t7;
    SD->f0.t2[17054] = -t7;
    SD->f0.t2[17055] = -t7;
    SD->f0.t2[17056] = -t7;
    SD->f0.t2[17057] = -t7;
    SD->f0.t2[17058] = -t7;
    SD->f0.t2[17059] = -t7;
    SD->f0.t2[17060] = -t7;
    SD->f0.t2[17061] = -t7;
    SD->f0.t2[17062] = 0.0;
    SD->f0.t2[17063] = 0.0;
    SD->f0.t2[17064] = 0.0;
    SD->f0.t2[17065] = 0.0;
    SD->f0.t2[17066] = weights[6] * 30.0;
    SD->f0.t2[17067] = t11;
    SD->f0.t2[17068] = t12;
    SD->f0.t2[17069] = t13;
    memset(&SD->f0.t2[17070], 0, 141U * sizeof(real_T));
    SD->f0.t2[17211] = -t7;
    SD->f0.t2[17212] = -t7;
    SD->f0.t2[17213] = -t7;
    SD->f0.t2[17214] = -t7;
    SD->f0.t2[17215] = -t7;
    SD->f0.t2[17216] = -t7;
    SD->f0.t2[17217] = -t7;
    SD->f0.t2[17218] = -t7;
    SD->f0.t2[17219] = -t7;
    SD->f0.t2[17220] = -t7;
    SD->f0.t2[17221] = -t7;
    SD->f0.t2[17222] = 0.0;
    SD->f0.t2[17223] = 0.0;
    SD->f0.t2[17224] = 0.0;
    SD->f0.t2[17225] = 0.0;
    SD->f0.t2[17226] = t11;
    SD->f0.t2[17227] = t11;
    SD->f0.t2[17228] = t12;
    SD->f0.t2[17229] = t13;
    memset(&SD->f0.t2[17230], 0, 145U * sizeof(real_T));
    SD->f0.t2[17375] = -t7;
    SD->f0.t2[17376] = -t7;
    SD->f0.t2[17377] = -t7;
    SD->f0.t2[17378] = -t7;
    SD->f0.t2[17379] = -t7;
    SD->f0.t2[17380] = -t7;
    SD->f0.t2[17381] = -t7;
    SD->f0.t2[17382] = 0.0;
    SD->f0.t2[17383] = 0.0;
    SD->f0.t2[17384] = 0.0;
    SD->f0.t2[17385] = 0.0;
    SD->f0.t2[17386] = t12;
    SD->f0.t2[17387] = t12;
    SD->f0.t2[17388] = t12;
    SD->f0.t2[17389] = t13;
    memset(&SD->f0.t2[17390], 0, 149U * sizeof(real_T));
    SD->f0.t2[17539] = -t7;
    SD->f0.t2[17540] = -t7;
    SD->f0.t2[17541] = -t7;
    SD->f0.t2[17542] = 0.0;
    SD->f0.t2[17543] = 0.0;
    SD->f0.t2[17544] = 0.0;
    SD->f0.t2[17545] = 0.0;
    SD->f0.t2[17546] = t13;
    SD->f0.t2[17547] = t13;
    SD->f0.t2[17548] = t13;
    SD->f0.t2[17549] = t13;
    memset(&SD->f0.t2[17550], 0, 160U * sizeof(real_T));
    SD->f0.t2[17710] = t14;
    memset(&SD->f0.t2[17711], 0, 160U * sizeof(real_T));
    SD->f0.t2[17871] = t14;
    memset(&SD->f0.t2[17872], 0, 160U * sizeof(real_T));
    SD->f0.t2[18032] = t14;
    memset(&SD->f0.t2[18033], 0, 160U * sizeof(real_T));
    SD->f0.t2[18193] = t14;
    memset(&SD->f0.t2[18194], 0, 160U * sizeof(real_T));
    SD->f0.t2[18354] = t14;
    memset(&SD->f0.t2[18355], 0, 160U * sizeof(real_T));
    SD->f0.t2[18515] = t14;
    memset(&SD->f0.t2[18516], 0, 160U * sizeof(real_T));
    SD->f0.t2[18676] = t14;
    memset(&SD->f0.t2[18677], 0, 160U * sizeof(real_T));
    SD->f0.t2[18837] = t14;
    memset(&SD->f0.t2[18838], 0, 160U * sizeof(real_T));
    SD->f0.t2[18998] = t14;
    memset(&SD->f0.t2[18999], 0, 160U * sizeof(real_T));
    SD->f0.t2[19159] = t14;
    memset(&SD->f0.t2[19160], 0, 160U * sizeof(real_T));
    SD->f0.t2[19320] = t14;
    memset(&SD->f0.t2[19321], 0, 160U * sizeof(real_T));
    SD->f0.t2[19481] = t14;
    memset(&SD->f0.t2[19482], 0, 160U * sizeof(real_T));
    SD->f0.t2[19642] = t14;
    memset(&SD->f0.t2[19643], 0, 160U * sizeof(real_T));
    SD->f0.t2[19803] = t14;
    memset(&SD->f0.t2[19804], 0, 160U * sizeof(real_T));
    SD->f0.t2[19964] = t14;
    memset(&SD->f0.t2[19965], 0, 160U * sizeof(real_T));
    SD->f0.t2[20125] = t14;
    memset(&SD->f0.t2[20126], 0, 160U * sizeof(real_T));
    SD->f0.t2[20286] = t14;
    memset(&SD->f0.t2[20287], 0, 160U * sizeof(real_T));
    SD->f0.t2[20447] = weights[8] * 2.0;
    memset(&SD->f0.t2[20448], 0, 2736U * sizeof(real_T));
    SD->f0.t2[23184] = t6;
    memset(&SD->f0.t2[23185], 0, 160U * sizeof(real_T));
    SD->f0.t2[23345] = t6;
    memset(&SD->f0.t2[23346], 0, 160U * sizeof(real_T));
    SD->f0.t2[23506] = t6;
    memset(&SD->f0.t2[23507], 0, 160U * sizeof(real_T));
    SD->f0.t2[23667] = t6;
    memset(&SD->f0.t2[23668], 0, 160U * sizeof(real_T));
    SD->f0.t2[23828] = t7;
    memset(&SD->f0.t2[23829], 0, 160U * sizeof(real_T));
    SD->f0.t2[23989] = t7;
    memset(&SD->f0.t2[23990], 0, 160U * sizeof(real_T));
    SD->f0.t2[24150] = t7;
    memset(&SD->f0.t2[24151], 0, 160U * sizeof(real_T));
    SD->f0.t2[24311] = t7;
    memset(&SD->f0.t2[24312], 0, 160U * sizeof(real_T));
    SD->f0.t2[24472] = t15;
    memset(&SD->f0.t2[24473], 0, 160U * sizeof(real_T));
    SD->f0.t2[24633] = t15;
    memset(&SD->f0.t2[24634], 0, 160U * sizeof(real_T));
    SD->f0.t2[24794] = t15;
    memset(&SD->f0.t2[24795], 0, 160U * sizeof(real_T));
    SD->f0.t2[24955] = t15;
    memset(&SD->f0.t2[24956], 0, 160U * sizeof(real_T));
    SD->f0.t2[25116] = t16;
    memset(&SD->f0.t2[25117], 0, 160U * sizeof(real_T));
    SD->f0.t2[25277] = t16;
    memset(&SD->f0.t2[25278], 0, 160U * sizeof(real_T));
    SD->f0.t2[25438] = t16;
    memset(&SD->f0.t2[25439], 0, 160U * sizeof(real_T));
    SD->f0.t2[25599] = t16;
    for (i0 = 0; i0 < 160; i0++) {
      memcpy(&H[i0 * 160], &SD->f0.t2[i0 * 160], 160U * sizeof(real_T));
    }

    f[0] = weights[1] * states_ref[0] * -2.0;
    f[1] = 0.0;
    f[2] = weights[1] * states_ref[0] * -2.0;
    f[3] = 0.0;
    f[4] = weights[1] * states_ref[0] * -2.0;
    f[5] = weights[2] * states_ref[1] * -2.0;
    f[6] = weights[1] * states_ref[0] * -2.0;
    f[7] = 0.0;
    f[8] = weights[1] * states_ref[0] * -2.0;
    f[9] = 0.0;
    f[10] = weights[1] * states_ref[0] * -2.0;
    f[11] = 0.0;
    f[12] = weights[1] * states_ref[0] * -2.0;
    f[13] = weights[2] * states_ref[2] * -2.0;
    f[14] = weights[1] * states_ref[0] * -2.0;
    f[15] = 0.0;
    f[16] = weights[1] * states_ref[0] * -2.0;
    f[17] = 0.0;
    f[18] = weights[1] * states_ref[0] * -2.0;
    f[19] = 0.0;
    f[20] = weights[1] * states_ref[0] * -2.0;
    f[21] = weights[2] * states_ref[3] * -2.0;
    f[22] = weights[1] * states_ref[0] * -2.0;
    f[23] = 0.0;
    f[24] = weights[1] * states_ref[0] * -2.0;
    f[25] = 0.0;
    f[26] = weights[1] * states_ref[0] * -2.0;
    f[27] = 0.0;
    f[28] = weights[1] * states_ref[0] * -2.0;
    f[29] = weights[2] * states_ref[4] * -2.0;
    f[30] = weights[1] * states_ref[0] * -2.0;
    f[31] = 0.0;
    f[32] = weights[1] * states_ref[0] * -2.0;
    f[33] = 0.0;
    f[34] = weights[3] * states_ref[5] * -2.0;
    f[35] = 0.0;
    f[36] = weights[3] * states_ref[5] * -2.0;
    f[37] = 0.0;
    f[38] = weights[3] * states_ref[5] * -2.0;
    f[39] = weights[4] * states_ref[6] * -2.0;
    f[40] = weights[3] * states_ref[5] * -2.0;
    f[41] = 0.0;
    f[42] = weights[3] * states_ref[5] * -2.0;
    f[43] = 0.0;
    f[44] = weights[3] * states_ref[5] * -2.0;
    f[45] = 0.0;
    f[46] = weights[3] * states_ref[5] * -2.0;
    f[47] = weights[4] * states_ref[7] * -2.0;
    f[48] = weights[3] * states_ref[5] * -2.0;
    f[49] = 0.0;
    f[50] = weights[3] * states_ref[5] * -2.0;
    f[51] = 0.0;
    f[52] = weights[3] * states_ref[5] * -2.0;
    f[53] = 0.0;
    f[54] = weights[3] * states_ref[5] * -2.0;
    f[55] = weights[4] * states_ref[8] * -2.0;
    f[56] = weights[3] * states_ref[5] * -2.0;
    f[57] = 0.0;
    f[58] = weights[3] * states_ref[5] * -2.0;
    f[59] = 0.0;
    f[60] = weights[3] * states_ref[5] * -2.0;
    f[61] = 0.0;
    f[62] = weights[3] * states_ref[5] * -2.0;
    f[63] = weights[4] * states_ref[9] * -2.0;
    f[64] = weights[3] * states_ref[5] * -2.0;
    f[65] = 0.0;
    f[66] = weights[3] * states_ref[5] * -2.0;
    f[67] = 0.0;
    f[68] = 0.0;
    f[69] = 0.0;
    f[70] = states[4] * weights[5] * -2.0;
    f[71] = states[4] * weights[5] * -2.0;
    f[72] = states[4] * weights[5] * -2.0;
    f[73] = states[4] * weights[5] * -2.0;
    f[74] = states[4] * weights[5] * -2.0;
    f[75] = states[4] * weights[5] * -2.0;
    f[76] = states[4] * weights[5] * -2.0;
    f[77] = states[4] * weights[5] * -2.0;
    f[78] = states[4] * weights[5] * -2.0;
    f[79] = states[4] * weights[5] * -2.0;
    f[80] = states[4] * weights[5] * -2.0;
    f[81] = states[4] * weights[5] * -2.0;
    f[82] = states[4] * weights[5] * -2.0;
    f[83] = states[4] * weights[5] * -2.0;
    f[84] = states[4] * weights[5] * -2.0;
    f[85] = 0.0;
    f[86] = 0.0;
    f[87] = states[5] * weights[6] * -2.0;
    f[88] = states[5] * weights[6] * -2.0;
    f[89] = states[5] * weights[6] * -2.0;
    f[90] = states[5] * weights[6] * -2.0;
    f[91] = states[5] * weights[6] * -2.0;
    f[92] = states[5] * weights[6] * -2.0;
    f[93] = states[5] * weights[6] * -2.0;
    f[94] = states[5] * weights[6] * -2.0;
    f[95] = states[5] * weights[6] * -2.0;
    f[96] = states[5] * weights[6] * -2.0;
    f[97] = states[5] * weights[6] * -2.0;
    f[98] = states[5] * weights[6] * -2.0;
    f[99] = states[5] * weights[6] * -2.0;
    f[100] = states[5] * weights[6] * -2.0;
    f[101] = states[5] * weights[6] * -2.0;
    f[102] = states[4] * weights[5] * 30.0;
    f[103] = states[4] * weights[5] * 22.0;
    f[104] = states[4] * weights[5] * 14.0;
    f[105] = states[4] * weights[5] * 6.0;
    f[106] = states[5] * weights[6] * 30.0;
    f[107] = states[5] * weights[6] * 22.0;
    f[108] = states[5] * weights[6] * 14.0;
    f[109] = states[5] * weights[6] * 6.0;
    memset(&f[110], 0, 50U * sizeof(real_T));
  } else {
    /*  Develop the Constraints Matrix and Vector */
    /* EQFAST_RIGHTSTART2V20 */
    /*     [AEQ,BEQ] = EQFAST_RIGHTSTART2V20(IN1,IN2,CPX1,CPY1,IN5,IN6) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:21:53 */
    t2 = states[4] - foot_info[2];
    t3 = states[5] - foot_info[5];
    t4 = states[5] + foot_info[5];
    memset(&beq[0], 0, sizeof(real_T) << 6);
    beq[64] = states[0];
    beq[65] = states[1];
    beq[66] = states[2];
    beq[67] = states[3];
    beq[68] = t2;
    beq[69] = t2;
    beq[70] = t2;
    beq[71] = t2;
    beq[72] = t3;
    beq[73] = t4;
    beq[74] = t3;
    beq[75] = t4;
    st.site = &b_emlrtRSI;

    /* IQFAST_RIGHTSTART2V20 */
    /*     [AIQ,BIQ] = IQFAST_RIGHTSTART2V20(IN1,IN2,IN3,IN4,IN5,CPX1,CPY1,IN8,IN9,IN10,IN11) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:22:06 */
    i0 = r1->size[1];
    if (!(1 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(1, 1, i0, (emlrtBCInfo *)&h_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(2 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(2, 1, i0, (emlrtBCInfo *)&g_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(3 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(3, 1, i0, (emlrtBCInfo *)&f_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(4 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(4, 1, i0, (emlrtBCInfo *)&e_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(5 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(5, 1, i0, (emlrtBCInfo *)&d_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(6 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(6, 1, i0, (emlrtBCInfo *)&c_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(7 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(7, 1, i0, (emlrtBCInfo *)&b_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(8 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(8, 1, i0, (emlrtBCInfo *)&emlrtBCI, &st);
    }

    SD->f0.dv1[0] = -1.0;
    memset(&SD->f0.dv1[1], 0, 33U * sizeof(real_T));
    SD->f0.dv1[34] = 1.0;
    memset(&SD->f0.dv1[35], 0, 33U * sizeof(real_T));
    SD->f0.dv1[68] = -Obs_Info[2];
    memset(&SD->f0.dv1[69], 0, 24U * sizeof(real_T));
    SD->f0.dv1[93] = -Obs_Info[2];
    memset(&SD->f0.dv1[94], 0, 145U * sizeof(real_T));
    SD->f0.dv1[239] = -1.0;
    memset(&SD->f0.dv1[240], 0, 33U * sizeof(real_T));
    SD->f0.dv1[273] = 1.0;
    memset(&SD->f0.dv1[274], 0, 33U * sizeof(real_T));
    SD->f0.dv1[307] = -Obs_Info[2];
    memset(&SD->f0.dv1[308], 0, 24U * sizeof(real_T));
    SD->f0.dv1[332] = -Obs_Info[2];
    memset(&SD->f0.dv1[333], 0, 145U * sizeof(real_T));
    SD->f0.dv1[478] = -1.0;
    memset(&SD->f0.dv1[479], 0, 33U * sizeof(real_T));
    SD->f0.dv1[512] = 1.0;
    memset(&SD->f0.dv1[513], 0, 33U * sizeof(real_T));
    SD->f0.dv1[546] = -Obs_Info[2];
    memset(&SD->f0.dv1[547], 0, 24U * sizeof(real_T));
    SD->f0.dv1[571] = -Obs_Info[2];
    memset(&SD->f0.dv1[572], 0, 145U * sizeof(real_T));
    SD->f0.dv1[717] = -1.0;
    memset(&SD->f0.dv1[718], 0, 33U * sizeof(real_T));
    SD->f0.dv1[751] = 1.0;
    memset(&SD->f0.dv1[752], 0, 33U * sizeof(real_T));
    SD->f0.dv1[785] = -Obs_Info[2];
    memset(&SD->f0.dv1[786], 0, 24U * sizeof(real_T));
    SD->f0.dv1[810] = -Obs_Info[2];
    memset(&SD->f0.dv1[811], 0, 145U * sizeof(real_T));
    SD->f0.dv1[956] = -1.0;
    memset(&SD->f0.dv1[957], 0, 33U * sizeof(real_T));
    SD->f0.dv1[990] = 1.0;
    memset(&SD->f0.dv1[991], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1024] = -Obs_Info[2];
    memset(&SD->f0.dv1[1025], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1049] = -Obs_Info[2];
    memset(&SD->f0.dv1[1050], 0, 145U * sizeof(real_T));
    SD->f0.dv1[1195] = -1.0;
    memset(&SD->f0.dv1[1196], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1229] = 1.0;
    memset(&SD->f0.dv1[1230], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1263] = -Obs_Info[2];
    memset(&SD->f0.dv1[1264], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1288] = -Obs_Info[2];
    memset(&SD->f0.dv1[1289], 0, 145U * sizeof(real_T));
    SD->f0.dv1[1434] = -1.0;
    memset(&SD->f0.dv1[1435], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1468] = 1.0;
    memset(&SD->f0.dv1[1469], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1502] = -Obs_Info[2];
    memset(&SD->f0.dv1[1503], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1527] = -Obs_Info[2];
    memset(&SD->f0.dv1[1528], 0, 145U * sizeof(real_T));
    SD->f0.dv1[1673] = -1.0;
    memset(&SD->f0.dv1[1674], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1707] = 1.0;
    memset(&SD->f0.dv1[1708], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1741] = -Obs_Info[2];
    memset(&SD->f0.dv1[1742], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1766] = -Obs_Info[2];
    memset(&SD->f0.dv1[1767], 0, 145U * sizeof(real_T));
    SD->f0.dv1[1912] = -1.0;
    memset(&SD->f0.dv1[1913], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1946] = 1.0;
    memset(&SD->f0.dv1[1947], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2005] = -qo[2];
    memset(&SD->f0.dv1[2006], 0, 145U * sizeof(real_T));
    SD->f0.dv1[2151] = -1.0;
    memset(&SD->f0.dv1[2152], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2185] = 1.0;
    memset(&SD->f0.dv1[2186], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2244] = -qo[2];
    memset(&SD->f0.dv1[2245], 0, 145U * sizeof(real_T));
    SD->f0.dv1[2390] = -1.0;
    memset(&SD->f0.dv1[2391], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2424] = 1.0;
    memset(&SD->f0.dv1[2425], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2483] = -qo[2];
    memset(&SD->f0.dv1[2484], 0, 145U * sizeof(real_T));
    SD->f0.dv1[2629] = -1.0;
    memset(&SD->f0.dv1[2630], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2663] = 1.0;
    memset(&SD->f0.dv1[2664], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2722] = -qo[2];
    memset(&SD->f0.dv1[2723], 0, 145U * sizeof(real_T));
    SD->f0.dv1[2868] = -1.0;
    memset(&SD->f0.dv1[2869], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2902] = 1.0;
    memset(&SD->f0.dv1[2903], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2961] = -qo[2];
    memset(&SD->f0.dv1[2962], 0, 145U * sizeof(real_T));
    SD->f0.dv1[3107] = -1.0;
    memset(&SD->f0.dv1[3108], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3141] = 1.0;
    memset(&SD->f0.dv1[3142], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3200] = -qo[2];
    memset(&SD->f0.dv1[3201], 0, 145U * sizeof(real_T));
    SD->f0.dv1[3346] = -1.0;
    memset(&SD->f0.dv1[3347], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3380] = 1.0;
    memset(&SD->f0.dv1[3381], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3439] = -qo[2];
    memset(&SD->f0.dv1[3440], 0, 145U * sizeof(real_T));
    SD->f0.dv1[3585] = -1.0;
    memset(&SD->f0.dv1[3586], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3619] = 1.0;
    memset(&SD->f0.dv1[3620], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3678] = -qo[2];
    memset(&SD->f0.dv1[3679], 0, 145U * sizeof(real_T));
    SD->f0.dv1[3824] = -1.0;
    memset(&SD->f0.dv1[3825], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3858] = 1.0;
    memset(&SD->f0.dv1[3859], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3917] = -qo[2];
    memset(&SD->f0.dv1[3918], 0, 145U * sizeof(real_T));
    SD->f0.dv1[4063] = -1.0;
    memset(&SD->f0.dv1[4064], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4097] = 1.0;
    memset(&SD->f0.dv1[4098], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4114] = -Obs_Info[3];
    memset(&SD->f0.dv1[4115], 0, 24U * sizeof(real_T));
    SD->f0.dv1[4139] = -Obs_Info[3];
    memset(&SD->f0.dv1[4140], 0, 162U * sizeof(real_T));
    SD->f0.dv1[4302] = -1.0;
    memset(&SD->f0.dv1[4303], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4336] = 1.0;
    memset(&SD->f0.dv1[4337], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4353] = -Obs_Info[3];
    memset(&SD->f0.dv1[4354], 0, 24U * sizeof(real_T));
    SD->f0.dv1[4378] = -Obs_Info[3];
    memset(&SD->f0.dv1[4379], 0, 162U * sizeof(real_T));
    SD->f0.dv1[4541] = -1.0;
    memset(&SD->f0.dv1[4542], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4575] = 1.0;
    memset(&SD->f0.dv1[4576], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4592] = -Obs_Info[3];
    memset(&SD->f0.dv1[4593], 0, 24U * sizeof(real_T));
    SD->f0.dv1[4617] = -Obs_Info[3];
    memset(&SD->f0.dv1[4618], 0, 162U * sizeof(real_T));
    SD->f0.dv1[4780] = -1.0;
    memset(&SD->f0.dv1[4781], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4814] = 1.0;
    memset(&SD->f0.dv1[4815], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4831] = -Obs_Info[3];
    memset(&SD->f0.dv1[4832], 0, 24U * sizeof(real_T));
    SD->f0.dv1[4856] = -Obs_Info[3];
    memset(&SD->f0.dv1[4857], 0, 162U * sizeof(real_T));
    SD->f0.dv1[5019] = -1.0;
    memset(&SD->f0.dv1[5020], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5053] = 1.0;
    memset(&SD->f0.dv1[5054], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5070] = -Obs_Info[3];
    memset(&SD->f0.dv1[5071], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5095] = -Obs_Info[3];
    memset(&SD->f0.dv1[5096], 0, 162U * sizeof(real_T));
    SD->f0.dv1[5258] = -1.0;
    memset(&SD->f0.dv1[5259], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5292] = 1.0;
    memset(&SD->f0.dv1[5293], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5309] = -Obs_Info[3];
    memset(&SD->f0.dv1[5310], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5334] = -Obs_Info[3];
    memset(&SD->f0.dv1[5335], 0, 162U * sizeof(real_T));
    SD->f0.dv1[5497] = -1.0;
    memset(&SD->f0.dv1[5498], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5531] = 1.0;
    memset(&SD->f0.dv1[5532], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5548] = -Obs_Info[3];
    memset(&SD->f0.dv1[5549], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5573] = -Obs_Info[3];
    memset(&SD->f0.dv1[5574], 0, 162U * sizeof(real_T));
    SD->f0.dv1[5736] = -1.0;
    memset(&SD->f0.dv1[5737], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5770] = 1.0;
    memset(&SD->f0.dv1[5771], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5787] = -Obs_Info[3];
    memset(&SD->f0.dv1[5788], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5812] = -Obs_Info[3];
    memset(&SD->f0.dv1[5813], 0, 162U * sizeof(real_T));
    SD->f0.dv1[5975] = -1.0;
    memset(&SD->f0.dv1[5976], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6009] = 1.0;
    memset(&SD->f0.dv1[6010], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6051] = -qo[3];
    memset(&SD->f0.dv1[6052], 0, 162U * sizeof(real_T));
    SD->f0.dv1[6214] = -1.0;
    memset(&SD->f0.dv1[6215], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6248] = 1.0;
    memset(&SD->f0.dv1[6249], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6290] = -qo[3];
    memset(&SD->f0.dv1[6291], 0, 162U * sizeof(real_T));
    SD->f0.dv1[6453] = -1.0;
    memset(&SD->f0.dv1[6454], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6487] = 1.0;
    memset(&SD->f0.dv1[6488], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6529] = -qo[3];
    memset(&SD->f0.dv1[6530], 0, 162U * sizeof(real_T));
    SD->f0.dv1[6692] = -1.0;
    memset(&SD->f0.dv1[6693], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6726] = 1.0;
    memset(&SD->f0.dv1[6727], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6768] = -qo[3];
    memset(&SD->f0.dv1[6769], 0, 162U * sizeof(real_T));
    SD->f0.dv1[6931] = -1.0;
    memset(&SD->f0.dv1[6932], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6965] = 1.0;
    memset(&SD->f0.dv1[6966], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7007] = -qo[3];
    memset(&SD->f0.dv1[7008], 0, 162U * sizeof(real_T));
    SD->f0.dv1[7170] = -1.0;
    memset(&SD->f0.dv1[7171], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7204] = 1.0;
    memset(&SD->f0.dv1[7205], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7246] = -qo[3];
    memset(&SD->f0.dv1[7247], 0, 162U * sizeof(real_T));
    SD->f0.dv1[7409] = -1.0;
    memset(&SD->f0.dv1[7410], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7443] = 1.0;
    memset(&SD->f0.dv1[7444], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7485] = -qo[3];
    memset(&SD->f0.dv1[7486], 0, 162U * sizeof(real_T));
    SD->f0.dv1[7648] = -1.0;
    memset(&SD->f0.dv1[7649], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7682] = 1.0;
    memset(&SD->f0.dv1[7683], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7724] = -qo[3];
    memset(&SD->f0.dv1[7725], 0, 162U * sizeof(real_T));
    SD->f0.dv1[7887] = -1.0;
    memset(&SD->f0.dv1[7888], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7921] = 1.0;
    memset(&SD->f0.dv1[7922], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7963] = -qo[3];
    memset(&SD->f0.dv1[7964], 0, sizeof(real_T) << 7);
    SD->f0.dv1[8092] = 1.0;
    memset(&SD->f0.dv1[8093], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8126] = -1.0;
    memset(&SD->f0.dv1[8127], 0, 75U * sizeof(real_T));
    SD->f0.dv1[8202] = 1.0;
    SD->f0.dv1[8203] = 0.0;
    SD->f0.dv1[8204] = -1.0;
    SD->f0.dv1[8205] = 0.0;
    SD->f0.dv1[8206] = 0.0;
    SD->f0.dv1[8207] = 0.0;
    SD->f0.dv1[8208] = 0.0;
    SD->f0.dv1[8209] = 0.0;
    SD->f0.dv1[8210] = 0.0;
    SD->f0.dv1[8211] = 0.0;
    SD->f0.dv1[8212] = 1.0;
    memset(&SD->f0.dv1[8213], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8246] = -1.0;
    memset(&SD->f0.dv1[8247], 0, 75U * sizeof(real_T));
    SD->f0.dv1[8322] = 1.0;
    SD->f0.dv1[8323] = 0.0;
    SD->f0.dv1[8324] = -1.0;
    SD->f0.dv1[8325] = 0.0;
    SD->f0.dv1[8326] = 0.0;
    SD->f0.dv1[8327] = 0.0;
    SD->f0.dv1[8328] = 0.0;
    SD->f0.dv1[8329] = 0.0;
    SD->f0.dv1[8330] = 0.0;
    SD->f0.dv1[8331] = 0.0;
    SD->f0.dv1[8332] = 1.0;
    memset(&SD->f0.dv1[8333], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8366] = -1.0;
    memset(&SD->f0.dv1[8367], 0, 85U * sizeof(real_T));
    SD->f0.dv1[8452] = 1.0;
    memset(&SD->f0.dv1[8453], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8486] = -1.0;
    memset(&SD->f0.dv1[8487], 0, 85U * sizeof(real_T));
    SD->f0.dv1[8572] = 1.0;
    memset(&SD->f0.dv1[8573], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8606] = -1.0;
    memset(&SD->f0.dv1[8607], 0, 85U * sizeof(real_T));
    SD->f0.dv1[8692] = 1.0;
    memset(&SD->f0.dv1[8693], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8726] = -1.0;
    memset(&SD->f0.dv1[8727], 0, 85U * sizeof(real_T));
    SD->f0.dv1[8812] = 1.0;
    memset(&SD->f0.dv1[8813], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8846] = -1.0;
    memset(&SD->f0.dv1[8847], 0, 85U * sizeof(real_T));
    SD->f0.dv1[8932] = 1.0;
    memset(&SD->f0.dv1[8933], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8966] = -1.0;
    memset(&SD->f0.dv1[8967], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9052] = 1.0;
    memset(&SD->f0.dv1[9053], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9086] = -1.0;
    memset(&SD->f0.dv1[9087], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9172] = 1.0;
    memset(&SD->f0.dv1[9173], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9206] = -1.0;
    memset(&SD->f0.dv1[9207], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9292] = 1.0;
    memset(&SD->f0.dv1[9293], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9326] = -1.0;
    memset(&SD->f0.dv1[9327], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9412] = 1.0;
    memset(&SD->f0.dv1[9413], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9446] = -1.0;
    memset(&SD->f0.dv1[9447], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9532] = 1.0;
    memset(&SD->f0.dv1[9533], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9566] = -1.0;
    memset(&SD->f0.dv1[9567], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9652] = 1.0;
    memset(&SD->f0.dv1[9653], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9686] = -1.0;
    memset(&SD->f0.dv1[9687], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9772] = 1.0;
    memset(&SD->f0.dv1[9773], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9806] = -1.0;
    memset(&SD->f0.dv1[9807], 0, 85U * sizeof(real_T));
    SD->f0.dv1[9892] = 1.0;
    memset(&SD->f0.dv1[9893], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9926] = -1.0;
    memset(&SD->f0.dv1[9927], 0, 85U * sizeof(real_T));
    SD->f0.dv1[10012] = 1.0;
    memset(&SD->f0.dv1[10013], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10046] = -1.0;
    memset(&SD->f0.dv1[10047], 0, 85U * sizeof(real_T));
    SD->f0.dv1[10132] = 1.0;
    memset(&SD->f0.dv1[10133], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10166] = -1.0;
    memset(&SD->f0.dv1[10167], 0, 62U * sizeof(real_T));
    SD->f0.dv1[10229] = 1.0;
    SD->f0.dv1[10230] = 0.0;
    SD->f0.dv1[10231] = -1.0;
    memset(&SD->f0.dv1[10232], 0, 20U * sizeof(real_T));
    SD->f0.dv1[10252] = 1.0;
    memset(&SD->f0.dv1[10253], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10286] = -1.0;
    memset(&SD->f0.dv1[10287], 0, 62U * sizeof(real_T));
    SD->f0.dv1[10349] = 1.0;
    SD->f0.dv1[10350] = 0.0;
    SD->f0.dv1[10351] = -1.0;
    memset(&SD->f0.dv1[10352], 0, 20U * sizeof(real_T));
    SD->f0.dv1[10372] = 1.0;
    memset(&SD->f0.dv1[10373], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10406] = -1.0;
    memset(&SD->f0.dv1[10407], 0, 85U * sizeof(real_T));
    SD->f0.dv1[10492] = 1.0;
    memset(&SD->f0.dv1[10493], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10526] = -1.0;
    memset(&SD->f0.dv1[10527], 0, 85U * sizeof(real_T));
    SD->f0.dv1[10612] = 1.0;
    memset(&SD->f0.dv1[10613], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10646] = -1.0;
    memset(&SD->f0.dv1[10647], 0, 85U * sizeof(real_T));
    SD->f0.dv1[10732] = 1.0;
    memset(&SD->f0.dv1[10733], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10766] = -1.0;
    memset(&SD->f0.dv1[10767], 0, 85U * sizeof(real_T));
    SD->f0.dv1[10852] = 1.0;
    memset(&SD->f0.dv1[10853], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10886] = -1.0;
    memset(&SD->f0.dv1[10887], 0, 85U * sizeof(real_T));
    SD->f0.dv1[10972] = 1.0;
    memset(&SD->f0.dv1[10973], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11006] = -1.0;
    memset(&SD->f0.dv1[11007], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11092] = 1.0;
    memset(&SD->f0.dv1[11093], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11126] = -1.0;
    memset(&SD->f0.dv1[11127], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11212] = 1.0;
    memset(&SD->f0.dv1[11213], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11246] = -1.0;
    memset(&SD->f0.dv1[11247], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11332] = 1.0;
    memset(&SD->f0.dv1[11333], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11366] = -1.0;
    memset(&SD->f0.dv1[11367], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11452] = 1.0;
    memset(&SD->f0.dv1[11453], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11486] = -1.0;
    memset(&SD->f0.dv1[11487], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11572] = 1.0;
    memset(&SD->f0.dv1[11573], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11606] = -1.0;
    memset(&SD->f0.dv1[11607], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11692] = 1.0;
    memset(&SD->f0.dv1[11693], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11726] = -1.0;
    memset(&SD->f0.dv1[11727], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11812] = 1.0;
    memset(&SD->f0.dv1[11813], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11846] = -1.0;
    memset(&SD->f0.dv1[11847], 0, 85U * sizeof(real_T));
    SD->f0.dv1[11932] = 1.0;
    memset(&SD->f0.dv1[11933], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11966] = -1.0;
    memset(&SD->f0.dv1[11967], 0, 85U * sizeof(real_T));
    SD->f0.dv1[12052] = 1.0;
    memset(&SD->f0.dv1[12053], 0, 33U * sizeof(real_T));
    SD->f0.dv1[12086] = -1.0;
    memset(&SD->f0.dv1[12087], 0, 645U * sizeof(real_T));
    SD->f0.dv1[12732] = -1.0;
    memset(&SD->f0.dv1[12733], 0, 433U * sizeof(real_T));
    SD->f0.dv1[13166] = -1.0;
    memset(&SD->f0.dv1[13167], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13183] = -1.0;
    memset(&SD->f0.dv1[13184], 0, 102U * sizeof(real_T));
    SD->f0.dv1[13286] = -1.0;
    memset(&SD->f0.dv1[13287], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13303] = -1.0;
    memset(&SD->f0.dv1[13304], 0, 102U * sizeof(real_T));
    SD->f0.dv1[13406] = -1.0;
    memset(&SD->f0.dv1[13407], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13423] = -1.0;
    memset(&SD->f0.dv1[13424], 0, 102U * sizeof(real_T));
    SD->f0.dv1[13526] = -1.0;
    memset(&SD->f0.dv1[13527], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13543] = -1.0;
    memset(&SD->f0.dv1[13544], 0, 102U * sizeof(real_T));
    SD->f0.dv1[13646] = -1.0;
    memset(&SD->f0.dv1[13647], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13663] = -1.0;
    memset(&SD->f0.dv1[13664], 0, 102U * sizeof(real_T));
    SD->f0.dv1[13766] = -1.0;
    memset(&SD->f0.dv1[13767], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13783] = -1.0;
    memset(&SD->f0.dv1[13784], 0, 102U * sizeof(real_T));
    SD->f0.dv1[13886] = -1.0;
    memset(&SD->f0.dv1[13887], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13903] = -1.0;
    memset(&SD->f0.dv1[13904], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14006] = -1.0;
    memset(&SD->f0.dv1[14007], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14023] = -1.0;
    memset(&SD->f0.dv1[14024], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14126] = -1.0;
    memset(&SD->f0.dv1[14127], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14143] = -1.0;
    memset(&SD->f0.dv1[14144], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14246] = -1.0;
    memset(&SD->f0.dv1[14247], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14263] = -1.0;
    memset(&SD->f0.dv1[14264], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14366] = -1.0;
    memset(&SD->f0.dv1[14367], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14383] = -1.0;
    memset(&SD->f0.dv1[14384], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14486] = -1.0;
    memset(&SD->f0.dv1[14487], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14503] = -1.0;
    memset(&SD->f0.dv1[14504], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14606] = -1.0;
    memset(&SD->f0.dv1[14607], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14623] = -1.0;
    memset(&SD->f0.dv1[14624], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14726] = -1.0;
    memset(&SD->f0.dv1[14727], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14743] = -1.0;
    memset(&SD->f0.dv1[14744], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14846] = -1.0;
    memset(&SD->f0.dv1[14847], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14863] = -1.0;
    memset(&SD->f0.dv1[14864], 0, 102U * sizeof(real_T));
    SD->f0.dv1[14966] = -1.0;
    memset(&SD->f0.dv1[14967], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14983] = -1.0;
    memset(&SD->f0.dv1[14984], 0, 102U * sizeof(real_T));
    SD->f0.dv1[15086] = -1.0;
    memset(&SD->f0.dv1[15087], 0, sizeof(real_T) << 4);
    SD->f0.dv1[15103] = -1.0;
    memset(&SD->f0.dv1[15104], 0, 127U * sizeof(real_T));
    SD->f0.dv1[15231] = 1.0;
    memset(&SD->f0.dv1[15232], 0, 2014U * sizeof(real_T));
    SD->f0.dv1[17246] = -1.0;
    SD->f0.dv1[17247] = 0.0;
    SD->f0.dv1[17248] = -1.0;
    memset(&SD->f0.dv1[17249], 0, 117U * sizeof(real_T));
    SD->f0.dv1[17366] = -1.0;
    SD->f0.dv1[17367] = 0.0;
    SD->f0.dv1[17368] = -1.0;
    memset(&SD->f0.dv1[17369], 0, 357U * sizeof(real_T));
    SD->f0.dv1[17726] = -1.0;
    SD->f0.dv1[17727] = 0.0;
    SD->f0.dv1[17728] = -1.0;
    memset(&SD->f0.dv1[17729], 0, 117U * sizeof(real_T));
    SD->f0.dv1[17846] = -1.0;
    SD->f0.dv1[17847] = 0.0;
    SD->f0.dv1[17848] = -1.0;
    memset(&SD->f0.dv1[17849], 0, 1191U * sizeof(real_T));
    for (i0 = 0; i0 < 160; i0++) {
      memcpy(&Aiq[i0 * 119], &SD->f0.dv1[i0 * 119], 119U * sizeof(real_T));
    }

    t2 = muDoubleScalarAbs(Obs_Info[2]);
    t3 = muDoubleScalarAbs(Obs_Info[3]);
    t7 = 1.0 / muDoubleScalarSqrt(t2 * t2 + t3 * t3);
    t2 = muDoubleScalarAbs(qo[2]);
    t9 = muDoubleScalarAbs(qo[3]);
    t13 = 1.0 / muDoubleScalarSqrt(t2 * t2 + t9 * t9);
    t14 = states[4] + foot_info[0];
    t15 = -states[4] + foot_info[0];
    t16 = states[5] + foot_info[3];
    t2 = -states[5] + foot_info[3];
    biq[0] = foot_info[6];
    biq[1] = foot_info[6];
    biq[2] = foot_info[6];
    biq[3] = foot_info[6];
    biq[4] = foot_info[6];
    biq[5] = foot_info[6];
    biq[6] = foot_info[6];
    biq[7] = foot_info[6];
    biq[8] = foot_info[6];
    biq[9] = foot_info[6];
    biq[10] = foot_info[6];
    biq[11] = foot_info[6];
    biq[12] = foot_info[6];
    biq[13] = foot_info[6];
    biq[14] = foot_info[6];
    biq[15] = foot_info[6];
    biq[16] = foot_info[6];
    biq[17] = foot_info[7];
    biq[18] = foot_info[7];
    biq[19] = foot_info[7];
    biq[20] = foot_info[7];
    biq[21] = foot_info[7];
    biq[22] = foot_info[7];
    biq[23] = foot_info[7];
    biq[24] = foot_info[7];
    biq[25] = foot_info[7];
    biq[26] = foot_info[7];
    biq[27] = foot_info[7];
    biq[28] = foot_info[7];
    biq[29] = foot_info[7];
    biq[30] = foot_info[7];
    biq[31] = foot_info[7];
    biq[32] = foot_info[7];
    biq[33] = foot_info[7];
    biq[34] = foot_info[6];
    biq[35] = foot_info[6];
    biq[36] = foot_info[6];
    biq[37] = foot_info[6];
    biq[38] = foot_info[6];
    biq[39] = foot_info[6];
    biq[40] = foot_info[6];
    biq[41] = foot_info[6];
    biq[42] = foot_info[6];
    biq[43] = foot_info[6];
    biq[44] = foot_info[6];
    biq[45] = foot_info[6];
    biq[46] = foot_info[6];
    biq[47] = foot_info[6];
    biq[48] = foot_info[6];
    biq[49] = foot_info[6];
    biq[50] = foot_info[6];
    biq[51] = foot_info[7];
    biq[52] = foot_info[7];
    biq[53] = foot_info[7];
    biq[54] = foot_info[7];
    biq[55] = foot_info[7];
    biq[56] = foot_info[7];
    biq[57] = foot_info[7];
    biq[58] = foot_info[7];
    biq[59] = foot_info[7];
    biq[60] = foot_info[7];
    biq[61] = foot_info[7];
    biq[62] = foot_info[7];
    biq[63] = foot_info[7];
    biq[64] = foot_info[7];
    biq[65] = foot_info[7];
    biq[66] = foot_info[7];
    biq[67] = foot_info[7];
    biq[68] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[0] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[0] * t7);
    biq[69] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0]] *
      t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]] *
      t7);
    biq[70] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] <<
      1] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      << 1] * t7);
    biq[71] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      3] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 3] * t7);
    biq[72] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] <<
      2] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      << 2] * t7);
    biq[73] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      5] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 5] * t7);
    biq[74] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      6] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 6] * t7);
    biq[75] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      7] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 7] * t7);
    memset(&biq[76], 0, 17U * sizeof(real_T));
    biq[93] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[0] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[0] * t7);
    biq[94] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[1] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[1] * t7);
    biq[95] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[2] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[2] * t7);
    biq[96] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[3] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[3] * t7);
    biq[97] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[4] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[4] * t7);
    biq[98] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[5] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[5] * t7);
    biq[99] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[6] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[6] * t7);
    biq[100] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[7] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[7] * t7);
    biq[101] = -qo[2] * (qo[0] + r2[8] * t13 * qo[2]) - qo[3] * (qo[1] + r2[8] *
      t13 * qo[3]);
    biq[102] = -qo[2] * (qo[0] + r2[9] * t13 * qo[2]) - qo[3] * (qo[1] + r2[9] *
      t13 * qo[3]);
    biq[103] = -qo[2] * (qo[0] + r2[10] * t13 * qo[2]) - qo[3] * (qo[1] + r2[10]
      * t13 * qo[3]);
    biq[104] = -qo[2] * (qo[0] + r2[11] * t13 * qo[2]) - qo[3] * (qo[1] + r2[11]
      * t13 * qo[3]);
    biq[105] = -qo[2] * (qo[0] + r2[12] * t13 * qo[2]) - qo[3] * (qo[1] + r2[12]
      * t13 * qo[3]);
    biq[106] = -qo[2] * (qo[0] + r2[13] * t13 * qo[2]) - qo[3] * (qo[1] + r2[13]
      * t13 * qo[3]);
    biq[107] = -qo[2] * (qo[0] + r2[14] * t13 * qo[2]) - qo[3] * (qo[1] + r2[14]
      * t13 * qo[3]);
    biq[108] = -qo[2] * (qo[0] + r2[15] * t13 * qo[2]) - qo[3] * (qo[1] + r2[15]
      * t13 * qo[3]);
    biq[109] = -qo[2] * (qo[0] + r2[16] * t13 * qo[2]) - qo[3] * (qo[1] + r2[16]
      * t13 * qo[3]);
    biq[110] = t14;
    biq[111] = t14;
    biq[112] = t15;
    biq[113] = t15;
    biq[114] = t16;
    biq[115] = t16;
    biq[116] = t2;
    biq[117] = t2;
    biq[118] = -foot_info[4];

    /*  Develop The Objective Function Matrix and Vector */
    /* OBJFAST_RIGHTSTART2V20 */
    /*     [H,F] = OBJFAST_RIGHTSTART2V20(CPX1,CPY1,IN3,IN4,IN5,IN6,CRX1,CRY1,CWX1,IN10,M1,IN12) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:22:59 */
    t2 = weights[1] * 2.0;
    t3 = weights[2] * 2.0;
    t4 = weights[3] * 2.0;
    t5 = weights[4] * 2.0;
    t6 = weights[5] * 2.0;
    t7 = weights[6] * 2.0;
    t8 = weights[5] * 22.0;
    t9 = weights[5] * 14.0;
    t10 = weights[5] * 6.0;
    t11 = weights[6] * 22.0;
    t12 = weights[6] * 14.0;
    t13 = weights[6] * 6.0;
    t14 = weights[0] * 2.0;
    t15 = weights[7] * 2.0;
    t16 = weights[9] * 2.0;
    SD->f0.t2[0] = t2;
    memset(&SD->f0.t2[1], 0, 321U * sizeof(real_T));
    SD->f0.t2[322] = t2;
    memset(&SD->f0.t2[323], 0, 321U * sizeof(real_T));
    SD->f0.t2[644] = t2;
    memset(&SD->f0.t2[645], 0, 160U * sizeof(real_T));
    SD->f0.t2[805] = t3;
    memset(&SD->f0.t2[806], 0, 160U * sizeof(real_T));
    SD->f0.t2[966] = t2;
    memset(&SD->f0.t2[967], 0, 321U * sizeof(real_T));
    SD->f0.t2[1288] = t2;
    memset(&SD->f0.t2[1289], 0, 321U * sizeof(real_T));
    SD->f0.t2[1610] = t2;
    memset(&SD->f0.t2[1611], 0, 321U * sizeof(real_T));
    SD->f0.t2[1932] = t2;
    memset(&SD->f0.t2[1933], 0, 160U * sizeof(real_T));
    SD->f0.t2[2093] = t3;
    memset(&SD->f0.t2[2094], 0, 160U * sizeof(real_T));
    SD->f0.t2[2254] = t2;
    memset(&SD->f0.t2[2255], 0, 321U * sizeof(real_T));
    SD->f0.t2[2576] = t2;
    memset(&SD->f0.t2[2577], 0, 321U * sizeof(real_T));
    SD->f0.t2[2898] = t2;
    memset(&SD->f0.t2[2899], 0, 321U * sizeof(real_T));
    SD->f0.t2[3220] = t2;
    memset(&SD->f0.t2[3221], 0, 160U * sizeof(real_T));
    SD->f0.t2[3381] = t3;
    memset(&SD->f0.t2[3382], 0, 160U * sizeof(real_T));
    SD->f0.t2[3542] = t2;
    memset(&SD->f0.t2[3543], 0, 321U * sizeof(real_T));
    SD->f0.t2[3864] = t2;
    memset(&SD->f0.t2[3865], 0, 321U * sizeof(real_T));
    SD->f0.t2[4186] = t2;
    memset(&SD->f0.t2[4187], 0, 321U * sizeof(real_T));
    SD->f0.t2[4508] = t2;
    memset(&SD->f0.t2[4509], 0, 160U * sizeof(real_T));
    SD->f0.t2[4669] = t3;
    memset(&SD->f0.t2[4670], 0, 160U * sizeof(real_T));
    SD->f0.t2[4830] = t2;
    memset(&SD->f0.t2[4831], 0, 321U * sizeof(real_T));
    SD->f0.t2[5152] = t2;
    memset(&SD->f0.t2[5153], 0, 321U * sizeof(real_T));
    SD->f0.t2[5474] = t4;
    memset(&SD->f0.t2[5475], 0, 321U * sizeof(real_T));
    SD->f0.t2[5796] = t4;
    memset(&SD->f0.t2[5797], 0, 321U * sizeof(real_T));
    SD->f0.t2[6118] = t4;
    memset(&SD->f0.t2[6119], 0, 160U * sizeof(real_T));
    SD->f0.t2[6279] = t5;
    memset(&SD->f0.t2[6280], 0, 160U * sizeof(real_T));
    SD->f0.t2[6440] = t4;
    memset(&SD->f0.t2[6441], 0, 321U * sizeof(real_T));
    SD->f0.t2[6762] = t4;
    memset(&SD->f0.t2[6763], 0, 321U * sizeof(real_T));
    SD->f0.t2[7084] = t4;
    memset(&SD->f0.t2[7085], 0, 321U * sizeof(real_T));
    SD->f0.t2[7406] = t4;
    memset(&SD->f0.t2[7407], 0, 160U * sizeof(real_T));
    SD->f0.t2[7567] = t5;
    memset(&SD->f0.t2[7568], 0, 160U * sizeof(real_T));
    SD->f0.t2[7728] = t4;
    memset(&SD->f0.t2[7729], 0, 321U * sizeof(real_T));
    SD->f0.t2[8050] = t4;
    memset(&SD->f0.t2[8051], 0, 321U * sizeof(real_T));
    SD->f0.t2[8372] = t4;
    memset(&SD->f0.t2[8373], 0, 321U * sizeof(real_T));
    SD->f0.t2[8694] = t4;
    memset(&SD->f0.t2[8695], 0, 160U * sizeof(real_T));
    SD->f0.t2[8855] = t5;
    memset(&SD->f0.t2[8856], 0, 160U * sizeof(real_T));
    SD->f0.t2[9016] = t4;
    memset(&SD->f0.t2[9017], 0, 321U * sizeof(real_T));
    SD->f0.t2[9338] = t4;
    memset(&SD->f0.t2[9339], 0, 321U * sizeof(real_T));
    SD->f0.t2[9660] = t4;
    memset(&SD->f0.t2[9661], 0, 321U * sizeof(real_T));
    SD->f0.t2[9982] = t4;
    memset(&SD->f0.t2[9983], 0, 160U * sizeof(real_T));
    SD->f0.t2[10143] = t5;
    memset(&SD->f0.t2[10144], 0, 160U * sizeof(real_T));
    SD->f0.t2[10304] = t4;
    memset(&SD->f0.t2[10305], 0, 321U * sizeof(real_T));
    SD->f0.t2[10626] = t4;
    memset(&SD->f0.t2[10627], 0, 643U * sizeof(real_T));
    SD->f0.t2[11270] = t6;
    memset(&SD->f0.t2[11271], 0, 31U * sizeof(real_T));
    SD->f0.t2[11302] = -t6;
    memset(&SD->f0.t2[11303], 0, sizeof(real_T) << 7);
    SD->f0.t2[11431] = t6;
    memset(&SD->f0.t2[11432], 0, 30U * sizeof(real_T));
    SD->f0.t2[11462] = -t6;
    memset(&SD->f0.t2[11463], 0, 129U * sizeof(real_T));
    SD->f0.t2[11592] = t6;
    memset(&SD->f0.t2[11593], 0, 29U * sizeof(real_T));
    SD->f0.t2[11622] = -t6;
    memset(&SD->f0.t2[11623], 0, 130U * sizeof(real_T));
    SD->f0.t2[11753] = t6;
    memset(&SD->f0.t2[11754], 0, 28U * sizeof(real_T));
    SD->f0.t2[11782] = -t6;
    memset(&SD->f0.t2[11783], 0, 131U * sizeof(real_T));
    SD->f0.t2[11914] = t6;
    memset(&SD->f0.t2[11915], 0, 27U * sizeof(real_T));
    SD->f0.t2[11942] = -t6;
    SD->f0.t2[11943] = -t6;
    memset(&SD->f0.t2[11944], 0, 131U * sizeof(real_T));
    SD->f0.t2[12075] = t6;
    memset(&SD->f0.t2[12076], 0, 26U * sizeof(real_T));
    SD->f0.t2[12102] = -t6;
    SD->f0.t2[12103] = -t6;
    memset(&SD->f0.t2[12104], 0, 132U * sizeof(real_T));
    SD->f0.t2[12236] = t6;
    memset(&SD->f0.t2[12237], 0, 25U * sizeof(real_T));
    SD->f0.t2[12262] = -t6;
    SD->f0.t2[12263] = -t6;
    memset(&SD->f0.t2[12264], 0, 133U * sizeof(real_T));
    SD->f0.t2[12397] = t6;
    memset(&SD->f0.t2[12398], 0, 24U * sizeof(real_T));
    SD->f0.t2[12422] = -t6;
    SD->f0.t2[12423] = -t6;
    memset(&SD->f0.t2[12424], 0, 134U * sizeof(real_T));
    SD->f0.t2[12558] = t6;
    memset(&SD->f0.t2[12559], 0, 23U * sizeof(real_T));
    SD->f0.t2[12582] = -t6;
    SD->f0.t2[12583] = -t6;
    SD->f0.t2[12584] = -t6;
    memset(&SD->f0.t2[12585], 0, 134U * sizeof(real_T));
    SD->f0.t2[12719] = t6;
    memset(&SD->f0.t2[12720], 0, 22U * sizeof(real_T));
    SD->f0.t2[12742] = -t6;
    SD->f0.t2[12743] = -t6;
    SD->f0.t2[12744] = -t6;
    memset(&SD->f0.t2[12745], 0, 135U * sizeof(real_T));
    SD->f0.t2[12880] = t6;
    memset(&SD->f0.t2[12881], 0, 21U * sizeof(real_T));
    SD->f0.t2[12902] = -t6;
    SD->f0.t2[12903] = -t6;
    SD->f0.t2[12904] = -t6;
    memset(&SD->f0.t2[12905], 0, 136U * sizeof(real_T));
    SD->f0.t2[13041] = t6;
    memset(&SD->f0.t2[13042], 0, 20U * sizeof(real_T));
    SD->f0.t2[13062] = -t6;
    SD->f0.t2[13063] = -t6;
    SD->f0.t2[13064] = -t6;
    memset(&SD->f0.t2[13065], 0, 137U * sizeof(real_T));
    SD->f0.t2[13202] = t6;
    memset(&SD->f0.t2[13203], 0, 19U * sizeof(real_T));
    SD->f0.t2[13222] = -t6;
    SD->f0.t2[13223] = -t6;
    SD->f0.t2[13224] = -t6;
    SD->f0.t2[13225] = -t6;
    memset(&SD->f0.t2[13226], 0, 137U * sizeof(real_T));
    SD->f0.t2[13363] = t6;
    memset(&SD->f0.t2[13364], 0, 18U * sizeof(real_T));
    SD->f0.t2[13382] = -t6;
    SD->f0.t2[13383] = -t6;
    SD->f0.t2[13384] = -t6;
    SD->f0.t2[13385] = -t6;
    memset(&SD->f0.t2[13386], 0, 138U * sizeof(real_T));
    SD->f0.t2[13524] = t6;
    memset(&SD->f0.t2[13525], 0, 17U * sizeof(real_T));
    SD->f0.t2[13542] = -t6;
    SD->f0.t2[13543] = -t6;
    SD->f0.t2[13544] = -t6;
    SD->f0.t2[13545] = -t6;
    memset(&SD->f0.t2[13546], 0, 461U * sizeof(real_T));
    SD->f0.t2[14007] = t7;
    memset(&SD->f0.t2[14008], 0, 18U * sizeof(real_T));
    SD->f0.t2[14026] = -t7;
    memset(&SD->f0.t2[14027], 0, 141U * sizeof(real_T));
    SD->f0.t2[14168] = t7;
    memset(&SD->f0.t2[14169], 0, 17U * sizeof(real_T));
    SD->f0.t2[14186] = -t7;
    memset(&SD->f0.t2[14187], 0, 142U * sizeof(real_T));
    SD->f0.t2[14329] = t7;
    memset(&SD->f0.t2[14330], 0, sizeof(real_T) << 4);
    SD->f0.t2[14346] = -t7;
    memset(&SD->f0.t2[14347], 0, 143U * sizeof(real_T));
    SD->f0.t2[14490] = t7;
    memset(&SD->f0.t2[14491], 0, 15U * sizeof(real_T));
    SD->f0.t2[14506] = -t7;
    memset(&SD->f0.t2[14507], 0, 144U * sizeof(real_T));
    SD->f0.t2[14651] = t7;
    memset(&SD->f0.t2[14652], 0, 14U * sizeof(real_T));
    SD->f0.t2[14666] = -t7;
    SD->f0.t2[14667] = -t7;
    memset(&SD->f0.t2[14668], 0, 144U * sizeof(real_T));
    SD->f0.t2[14812] = t7;
    memset(&SD->f0.t2[14813], 0, 13U * sizeof(real_T));
    SD->f0.t2[14826] = -t7;
    SD->f0.t2[14827] = -t7;
    memset(&SD->f0.t2[14828], 0, 145U * sizeof(real_T));
    SD->f0.t2[14973] = t7;
    memset(&SD->f0.t2[14974], 0, 12U * sizeof(real_T));
    SD->f0.t2[14986] = -t7;
    SD->f0.t2[14987] = -t7;
    memset(&SD->f0.t2[14988], 0, 146U * sizeof(real_T));
    SD->f0.t2[15134] = t7;
    memset(&SD->f0.t2[15135], 0, 11U * sizeof(real_T));
    SD->f0.t2[15146] = -t7;
    SD->f0.t2[15147] = -t7;
    memset(&SD->f0.t2[15148], 0, 147U * sizeof(real_T));
    SD->f0.t2[15295] = t7;
    memset(&SD->f0.t2[15296], 0, 10U * sizeof(real_T));
    SD->f0.t2[15306] = -t7;
    SD->f0.t2[15307] = -t7;
    SD->f0.t2[15308] = -t7;
    memset(&SD->f0.t2[15309], 0, 147U * sizeof(real_T));
    SD->f0.t2[15456] = t7;
    memset(&SD->f0.t2[15457], 0, 9U * sizeof(real_T));
    SD->f0.t2[15466] = -t7;
    SD->f0.t2[15467] = -t7;
    SD->f0.t2[15468] = -t7;
    memset(&SD->f0.t2[15469], 0, 148U * sizeof(real_T));
    SD->f0.t2[15617] = t7;
    memset(&SD->f0.t2[15618], 0, sizeof(real_T) << 3);
    SD->f0.t2[15626] = -t7;
    SD->f0.t2[15627] = -t7;
    SD->f0.t2[15628] = -t7;
    memset(&SD->f0.t2[15629], 0, 149U * sizeof(real_T));
    SD->f0.t2[15778] = t7;
    SD->f0.t2[15779] = 0.0;
    SD->f0.t2[15780] = 0.0;
    SD->f0.t2[15781] = 0.0;
    SD->f0.t2[15782] = 0.0;
    SD->f0.t2[15783] = 0.0;
    SD->f0.t2[15784] = 0.0;
    SD->f0.t2[15785] = 0.0;
    SD->f0.t2[15786] = -t7;
    SD->f0.t2[15787] = -t7;
    SD->f0.t2[15788] = -t7;
    memset(&SD->f0.t2[15789], 0, 150U * sizeof(real_T));
    SD->f0.t2[15939] = t7;
    SD->f0.t2[15940] = 0.0;
    SD->f0.t2[15941] = 0.0;
    SD->f0.t2[15942] = 0.0;
    SD->f0.t2[15943] = 0.0;
    SD->f0.t2[15944] = 0.0;
    SD->f0.t2[15945] = 0.0;
    SD->f0.t2[15946] = -t7;
    SD->f0.t2[15947] = -t7;
    SD->f0.t2[15948] = -t7;
    SD->f0.t2[15949] = -t7;
    memset(&SD->f0.t2[15950], 0, 150U * sizeof(real_T));
    SD->f0.t2[16100] = t7;
    SD->f0.t2[16101] = 0.0;
    SD->f0.t2[16102] = 0.0;
    SD->f0.t2[16103] = 0.0;
    SD->f0.t2[16104] = 0.0;
    SD->f0.t2[16105] = 0.0;
    SD->f0.t2[16106] = -t7;
    SD->f0.t2[16107] = -t7;
    SD->f0.t2[16108] = -t7;
    SD->f0.t2[16109] = -t7;
    memset(&SD->f0.t2[16110], 0, 151U * sizeof(real_T));
    SD->f0.t2[16261] = t7;
    SD->f0.t2[16262] = 0.0;
    SD->f0.t2[16263] = 0.0;
    SD->f0.t2[16264] = 0.0;
    SD->f0.t2[16265] = 0.0;
    SD->f0.t2[16266] = -t7;
    SD->f0.t2[16267] = -t7;
    SD->f0.t2[16268] = -t7;
    SD->f0.t2[16269] = -t7;
    memset(&SD->f0.t2[16270], 0, 120U * sizeof(real_T));
    SD->f0.t2[16390] = -t6;
    SD->f0.t2[16391] = -t6;
    SD->f0.t2[16392] = -t6;
    SD->f0.t2[16393] = -t6;
    SD->f0.t2[16394] = -t6;
    SD->f0.t2[16395] = -t6;
    SD->f0.t2[16396] = -t6;
    SD->f0.t2[16397] = -t6;
    SD->f0.t2[16398] = -t6;
    SD->f0.t2[16399] = -t6;
    SD->f0.t2[16400] = -t6;
    SD->f0.t2[16401] = -t6;
    SD->f0.t2[16402] = -t6;
    SD->f0.t2[16403] = -t6;
    SD->f0.t2[16404] = -t6;
    memset(&SD->f0.t2[16405], 0, 17U * sizeof(real_T));
    SD->f0.t2[16422] = weights[5] * 30.0;
    SD->f0.t2[16423] = t8;
    SD->f0.t2[16424] = t9;
    SD->f0.t2[16425] = t10;
    memset(&SD->f0.t2[16426], 0, sizeof(real_T) << 7);
    SD->f0.t2[16554] = -t6;
    SD->f0.t2[16555] = -t6;
    SD->f0.t2[16556] = -t6;
    SD->f0.t2[16557] = -t6;
    SD->f0.t2[16558] = -t6;
    SD->f0.t2[16559] = -t6;
    SD->f0.t2[16560] = -t6;
    SD->f0.t2[16561] = -t6;
    SD->f0.t2[16562] = -t6;
    SD->f0.t2[16563] = -t6;
    SD->f0.t2[16564] = -t6;
    memset(&SD->f0.t2[16565], 0, 17U * sizeof(real_T));
    SD->f0.t2[16582] = t8;
    SD->f0.t2[16583] = t8;
    SD->f0.t2[16584] = t9;
    SD->f0.t2[16585] = t10;
    memset(&SD->f0.t2[16586], 0, 132U * sizeof(real_T));
    SD->f0.t2[16718] = -t6;
    SD->f0.t2[16719] = -t6;
    SD->f0.t2[16720] = -t6;
    SD->f0.t2[16721] = -t6;
    SD->f0.t2[16722] = -t6;
    SD->f0.t2[16723] = -t6;
    SD->f0.t2[16724] = -t6;
    memset(&SD->f0.t2[16725], 0, 17U * sizeof(real_T));
    SD->f0.t2[16742] = t9;
    SD->f0.t2[16743] = t9;
    SD->f0.t2[16744] = t9;
    SD->f0.t2[16745] = t10;
    memset(&SD->f0.t2[16746], 0, 136U * sizeof(real_T));
    SD->f0.t2[16882] = -t6;
    SD->f0.t2[16883] = -t6;
    SD->f0.t2[16884] = -t6;
    memset(&SD->f0.t2[16885], 0, 17U * sizeof(real_T));
    SD->f0.t2[16902] = t10;
    SD->f0.t2[16903] = t10;
    SD->f0.t2[16904] = t10;
    SD->f0.t2[16905] = t10;
    memset(&SD->f0.t2[16906], 0, 141U * sizeof(real_T));
    SD->f0.t2[17047] = -t7;
    SD->f0.t2[17048] = -t7;
    SD->f0.t2[17049] = -t7;
    SD->f0.t2[17050] = -t7;
    SD->f0.t2[17051] = -t7;
    SD->f0.t2[17052] = -t7;
    SD->f0.t2[17053] = -t7;
    SD->f0.t2[17054] = -t7;
    SD->f0.t2[17055] = -t7;
    SD->f0.t2[17056] = -t7;
    SD->f0.t2[17057] = -t7;
    SD->f0.t2[17058] = -t7;
    SD->f0.t2[17059] = -t7;
    SD->f0.t2[17060] = -t7;
    SD->f0.t2[17061] = -t7;
    SD->f0.t2[17062] = 0.0;
    SD->f0.t2[17063] = 0.0;
    SD->f0.t2[17064] = 0.0;
    SD->f0.t2[17065] = 0.0;
    SD->f0.t2[17066] = weights[6] * 30.0;
    SD->f0.t2[17067] = t11;
    SD->f0.t2[17068] = t12;
    SD->f0.t2[17069] = t13;
    memset(&SD->f0.t2[17070], 0, 141U * sizeof(real_T));
    SD->f0.t2[17211] = -t7;
    SD->f0.t2[17212] = -t7;
    SD->f0.t2[17213] = -t7;
    SD->f0.t2[17214] = -t7;
    SD->f0.t2[17215] = -t7;
    SD->f0.t2[17216] = -t7;
    SD->f0.t2[17217] = -t7;
    SD->f0.t2[17218] = -t7;
    SD->f0.t2[17219] = -t7;
    SD->f0.t2[17220] = -t7;
    SD->f0.t2[17221] = -t7;
    SD->f0.t2[17222] = 0.0;
    SD->f0.t2[17223] = 0.0;
    SD->f0.t2[17224] = 0.0;
    SD->f0.t2[17225] = 0.0;
    SD->f0.t2[17226] = t11;
    SD->f0.t2[17227] = t11;
    SD->f0.t2[17228] = t12;
    SD->f0.t2[17229] = t13;
    memset(&SD->f0.t2[17230], 0, 145U * sizeof(real_T));
    SD->f0.t2[17375] = -t7;
    SD->f0.t2[17376] = -t7;
    SD->f0.t2[17377] = -t7;
    SD->f0.t2[17378] = -t7;
    SD->f0.t2[17379] = -t7;
    SD->f0.t2[17380] = -t7;
    SD->f0.t2[17381] = -t7;
    SD->f0.t2[17382] = 0.0;
    SD->f0.t2[17383] = 0.0;
    SD->f0.t2[17384] = 0.0;
    SD->f0.t2[17385] = 0.0;
    SD->f0.t2[17386] = t12;
    SD->f0.t2[17387] = t12;
    SD->f0.t2[17388] = t12;
    SD->f0.t2[17389] = t13;
    memset(&SD->f0.t2[17390], 0, 149U * sizeof(real_T));
    SD->f0.t2[17539] = -t7;
    SD->f0.t2[17540] = -t7;
    SD->f0.t2[17541] = -t7;
    SD->f0.t2[17542] = 0.0;
    SD->f0.t2[17543] = 0.0;
    SD->f0.t2[17544] = 0.0;
    SD->f0.t2[17545] = 0.0;
    SD->f0.t2[17546] = t13;
    SD->f0.t2[17547] = t13;
    SD->f0.t2[17548] = t13;
    SD->f0.t2[17549] = t13;
    memset(&SD->f0.t2[17550], 0, 160U * sizeof(real_T));
    SD->f0.t2[17710] = t14;
    memset(&SD->f0.t2[17711], 0, 160U * sizeof(real_T));
    SD->f0.t2[17871] = t14;
    memset(&SD->f0.t2[17872], 0, 160U * sizeof(real_T));
    SD->f0.t2[18032] = t14;
    memset(&SD->f0.t2[18033], 0, 160U * sizeof(real_T));
    SD->f0.t2[18193] = t14;
    memset(&SD->f0.t2[18194], 0, 160U * sizeof(real_T));
    SD->f0.t2[18354] = t14;
    memset(&SD->f0.t2[18355], 0, 160U * sizeof(real_T));
    SD->f0.t2[18515] = t14;
    memset(&SD->f0.t2[18516], 0, 160U * sizeof(real_T));
    SD->f0.t2[18676] = t14;
    memset(&SD->f0.t2[18677], 0, 160U * sizeof(real_T));
    SD->f0.t2[18837] = t14;
    memset(&SD->f0.t2[18838], 0, 160U * sizeof(real_T));
    SD->f0.t2[18998] = t14;
    memset(&SD->f0.t2[18999], 0, 160U * sizeof(real_T));
    SD->f0.t2[19159] = t14;
    memset(&SD->f0.t2[19160], 0, 160U * sizeof(real_T));
    SD->f0.t2[19320] = t14;
    memset(&SD->f0.t2[19321], 0, 160U * sizeof(real_T));
    SD->f0.t2[19481] = t14;
    memset(&SD->f0.t2[19482], 0, 160U * sizeof(real_T));
    SD->f0.t2[19642] = t14;
    memset(&SD->f0.t2[19643], 0, 160U * sizeof(real_T));
    SD->f0.t2[19803] = t14;
    memset(&SD->f0.t2[19804], 0, 160U * sizeof(real_T));
    SD->f0.t2[19964] = t14;
    memset(&SD->f0.t2[19965], 0, 160U * sizeof(real_T));
    SD->f0.t2[20125] = t14;
    memset(&SD->f0.t2[20126], 0, 160U * sizeof(real_T));
    SD->f0.t2[20286] = t14;
    memset(&SD->f0.t2[20287], 0, 160U * sizeof(real_T));
    SD->f0.t2[20447] = weights[8] * 2.0;
    memset(&SD->f0.t2[20448], 0, 2736U * sizeof(real_T));
    SD->f0.t2[23184] = t6;
    memset(&SD->f0.t2[23185], 0, 160U * sizeof(real_T));
    SD->f0.t2[23345] = t6;
    memset(&SD->f0.t2[23346], 0, 160U * sizeof(real_T));
    SD->f0.t2[23506] = t6;
    memset(&SD->f0.t2[23507], 0, 160U * sizeof(real_T));
    SD->f0.t2[23667] = t6;
    memset(&SD->f0.t2[23668], 0, 160U * sizeof(real_T));
    SD->f0.t2[23828] = t7;
    memset(&SD->f0.t2[23829], 0, 160U * sizeof(real_T));
    SD->f0.t2[23989] = t7;
    memset(&SD->f0.t2[23990], 0, 160U * sizeof(real_T));
    SD->f0.t2[24150] = t7;
    memset(&SD->f0.t2[24151], 0, 160U * sizeof(real_T));
    SD->f0.t2[24311] = t7;
    memset(&SD->f0.t2[24312], 0, 160U * sizeof(real_T));
    SD->f0.t2[24472] = t15;
    memset(&SD->f0.t2[24473], 0, 160U * sizeof(real_T));
    SD->f0.t2[24633] = t15;
    memset(&SD->f0.t2[24634], 0, 160U * sizeof(real_T));
    SD->f0.t2[24794] = t15;
    memset(&SD->f0.t2[24795], 0, 160U * sizeof(real_T));
    SD->f0.t2[24955] = t15;
    memset(&SD->f0.t2[24956], 0, 160U * sizeof(real_T));
    SD->f0.t2[25116] = t16;
    memset(&SD->f0.t2[25117], 0, 160U * sizeof(real_T));
    SD->f0.t2[25277] = t16;
    memset(&SD->f0.t2[25278], 0, 160U * sizeof(real_T));
    SD->f0.t2[25438] = t16;
    memset(&SD->f0.t2[25439], 0, 160U * sizeof(real_T));
    SD->f0.t2[25599] = t16;
    for (i0 = 0; i0 < 160; i0++) {
      memcpy(&H[i0 * 160], &SD->f0.t2[i0 * 160], 160U * sizeof(real_T));
    }

    f[0] = weights[1] * states_ref[0] * -2.0;
    f[1] = 0.0;
    f[2] = weights[1] * states_ref[0] * -2.0;
    f[3] = 0.0;
    f[4] = weights[1] * states_ref[0] * -2.0;
    f[5] = weights[2] * states_ref[1] * -2.0;
    f[6] = weights[1] * states_ref[0] * -2.0;
    f[7] = 0.0;
    f[8] = weights[1] * states_ref[0] * -2.0;
    f[9] = 0.0;
    f[10] = weights[1] * states_ref[0] * -2.0;
    f[11] = 0.0;
    f[12] = weights[1] * states_ref[0] * -2.0;
    f[13] = weights[2] * states_ref[2] * -2.0;
    f[14] = weights[1] * states_ref[0] * -2.0;
    f[15] = 0.0;
    f[16] = weights[1] * states_ref[0] * -2.0;
    f[17] = 0.0;
    f[18] = weights[1] * states_ref[0] * -2.0;
    f[19] = 0.0;
    f[20] = weights[1] * states_ref[0] * -2.0;
    f[21] = weights[2] * states_ref[3] * -2.0;
    f[22] = weights[1] * states_ref[0] * -2.0;
    f[23] = 0.0;
    f[24] = weights[1] * states_ref[0] * -2.0;
    f[25] = 0.0;
    f[26] = weights[1] * states_ref[0] * -2.0;
    f[27] = 0.0;
    f[28] = weights[1] * states_ref[0] * -2.0;
    f[29] = weights[2] * states_ref[4] * -2.0;
    f[30] = weights[1] * states_ref[0] * -2.0;
    f[31] = 0.0;
    f[32] = weights[1] * states_ref[0] * -2.0;
    f[33] = 0.0;
    f[34] = weights[3] * states_ref[5] * -2.0;
    f[35] = 0.0;
    f[36] = weights[3] * states_ref[5] * -2.0;
    f[37] = 0.0;
    f[38] = weights[3] * states_ref[5] * -2.0;
    f[39] = weights[4] * states_ref[6] * -2.0;
    f[40] = weights[3] * states_ref[5] * -2.0;
    f[41] = 0.0;
    f[42] = weights[3] * states_ref[5] * -2.0;
    f[43] = 0.0;
    f[44] = weights[3] * states_ref[5] * -2.0;
    f[45] = 0.0;
    f[46] = weights[3] * states_ref[5] * -2.0;
    f[47] = weights[4] * states_ref[7] * -2.0;
    f[48] = weights[3] * states_ref[5] * -2.0;
    f[49] = 0.0;
    f[50] = weights[3] * states_ref[5] * -2.0;
    f[51] = 0.0;
    f[52] = weights[3] * states_ref[5] * -2.0;
    f[53] = 0.0;
    f[54] = weights[3] * states_ref[5] * -2.0;
    f[55] = weights[4] * states_ref[8] * -2.0;
    f[56] = weights[3] * states_ref[5] * -2.0;
    f[57] = 0.0;
    f[58] = weights[3] * states_ref[5] * -2.0;
    f[59] = 0.0;
    f[60] = weights[3] * states_ref[5] * -2.0;
    f[61] = 0.0;
    f[62] = weights[3] * states_ref[5] * -2.0;
    f[63] = weights[4] * states_ref[9] * -2.0;
    f[64] = weights[3] * states_ref[5] * -2.0;
    f[65] = 0.0;
    f[66] = weights[3] * states_ref[5] * -2.0;
    f[67] = 0.0;
    f[68] = 0.0;
    f[69] = 0.0;
    f[70] = states[4] * weights[5] * -2.0;
    f[71] = states[4] * weights[5] * -2.0;
    f[72] = states[4] * weights[5] * -2.0;
    f[73] = states[4] * weights[5] * -2.0;
    f[74] = states[4] * weights[5] * -2.0;
    f[75] = states[4] * weights[5] * -2.0;
    f[76] = states[4] * weights[5] * -2.0;
    f[77] = states[4] * weights[5] * -2.0;
    f[78] = states[4] * weights[5] * -2.0;
    f[79] = states[4] * weights[5] * -2.0;
    f[80] = states[4] * weights[5] * -2.0;
    f[81] = states[4] * weights[5] * -2.0;
    f[82] = states[4] * weights[5] * -2.0;
    f[83] = states[4] * weights[5] * -2.0;
    f[84] = states[4] * weights[5] * -2.0;
    f[85] = 0.0;
    f[86] = 0.0;
    f[87] = states[5] * weights[6] * -2.0;
    f[88] = states[5] * weights[6] * -2.0;
    f[89] = states[5] * weights[6] * -2.0;
    f[90] = states[5] * weights[6] * -2.0;
    f[91] = states[5] * weights[6] * -2.0;
    f[92] = states[5] * weights[6] * -2.0;
    f[93] = states[5] * weights[6] * -2.0;
    f[94] = states[5] * weights[6] * -2.0;
    f[95] = states[5] * weights[6] * -2.0;
    f[96] = states[5] * weights[6] * -2.0;
    f[97] = states[5] * weights[6] * -2.0;
    f[98] = states[5] * weights[6] * -2.0;
    f[99] = states[5] * weights[6] * -2.0;
    f[100] = states[5] * weights[6] * -2.0;
    f[101] = states[5] * weights[6] * -2.0;
    f[102] = states[4] * weights[5] * 30.0;
    f[103] = states[4] * weights[5] * 22.0;
    f[104] = states[4] * weights[5] * 14.0;
    f[105] = states[4] * weights[5] * 6.0;
    f[106] = states[5] * weights[6] * 30.0;
    f[107] = states[5] * weights[6] * 22.0;
    f[108] = states[5] * weights[6] * 14.0;
    f[109] = states[5] * weights[6] * 6.0;
    memset(&f[110], 0, 50U * sizeof(real_T));
  }

  emxFree_real_T(&r1);
  emlrtHeapReferenceStackLeaveFcnR2012b(sp);
}

/* End of code generation (Fast_MPCV20_form_Step2.cpp) */
