/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * Fast_MPCV20_form_Step1.cpp
 *
 * Code generation for function 'Fast_MPCV20_form_Step1'
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "Fast_MPCV20_form_Step1.h"
#include "Fast_MPCV20_form_Step1_emxutil.h"
#include "IqFast_LeftStart1V20.h"
#include "EqFast_LeftStart1V20.h"

/* Variable Definitions */
static emlrtRSInfo emlrtRSI = { 56,    /* lineNo */
  "Fast_MPCV20_form_Step1",            /* fcnName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step1.m"/* pathName */
};

static emlrtRSInfo b_emlrtRSI = { 63,  /* lineNo */
  "Fast_MPCV20_form_Step1",            /* fcnName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step1.m"/* pathName */
};

static emlrtRTEInfo emlrtRTEI = { 1,   /* lineNo */
  34,                                  /* colNo */
  "Fast_MPCV20_form_Step1",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step1.m"/* pName */
};

static emlrtRTEInfo b_emlrtRTEI = { 42,/* lineNo */
  1,                                   /* colNo */
  "Fast_MPCV20_form_Step1",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step1.m"/* pName */
};

static emlrtBCInfo emlrtBCI = { -1,    /* iFirst */
  -1,                                  /* iLast */
  24,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo b_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  23,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  22,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo d_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  21,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo e_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  20,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo f_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  19,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo g_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  18,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo h_emlrtBCI = { -1,  /* iFirst */
  -1,                                  /* iLast */
  17,                                  /* lineNo */
  13,                                  /* colNo */
  "in4",                               /* aName */
  "IqFast_RightStart1V20",             /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\LIPM_Fast_Avoidance\\Functions\\MatlabFunc\\IqFast_RightStart1V20.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo emlrtDCI = { 42,    /* lineNo */
  20,                                  /* colNo */
  "Fast_MPCV20_form_Step1",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step1.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo b_emlrtDCI = { 42,  /* lineNo */
  20,                                  /* colNo */
  "Fast_MPCV20_form_Step1",            /* fName */
  "D:\\Cassie_Avoidance\\Obstacle_Avoidance_OpenLoopNoCassie\\Code_gen\\2D\\Fast_MPCV20_form_Step1.m",/* pName */
  4                                    /* checkKind */
};

/* Function Definitions */
void Fast_MPCV20_form_Step1(Fast_MPCV20_form_Step1StackData *SD, const
  emlrtStack *sp, const real_T states[6], real_T Nodes, const real_T r[3], const
  real_T qo[4], const real_T states_ref[10], const real_T MPC_index[2], const
  real_T weights[10], const real_T foot_info[8], const real_T Obs_Info[4],
  real_T Aeq[12160], real_T beq[76], real_T Aiq[19680], real_T biq[123], real_T
  H[25600], real_T f[160])
{
  static const real_T dv0[12160] = { -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0,
    -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0,
    -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.1,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.09,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
    -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0 };

  emxArray_real_T *r1;
  int32_T i0;
  int32_T loop_ub;
  real_T r2[17];
  real_T t2;
  real_T t3;
  real_T t4;
  real_T t5;
  real_T t6;
  real_T t7;
  real_T t8;
  real_T t9;
  real_T t10;
  real_T t11;
  real_T t12;
  real_T t13;
  real_T t14;
  real_T t15;
  real_T t16;
  emlrtStack st;
  st.prev = sp;
  st.tls = sp->tls;
  emlrtHeapReferenceStackEnterFcnR2012b(sp);
  memcpy(&Aeq[0], &dv0[0], 12160U * sizeof(real_T));
  emxInit_real_T(sp, &r1, 2, &b_emlrtRTEI, true);

  /* TEMP_MPC_FORM Summary of this function goes here */
  /*    Detailed explanation goes here */
  /*    This function formulates all the matrices for MPC QP */
  /*    states: current robot states, include CoM states and foot placement */
  /*    Nodes: Number of nodes in MPC prediction */
  /*    r: radius for obstacle avoidance */
  /*    qo: obstacle states */
  /*    states_ref: desired robot states */
  /*    MPC_index : left/right step index, contact sequence index */
  /*    weights   : weight in the MPC cost function */
  /*  unpack inputs */
  i0 = r1->size[0] * r1->size[1];
  r1->size[0] = 1;
  if (!(Nodes >= 0.0)) {
    emlrtNonNegativeCheckR2012b(Nodes, (emlrtDCInfo *)&b_emlrtDCI, sp);
  }

  if (Nodes != (int32_T)muDoubleScalarFloor(Nodes)) {
    emlrtIntegerCheckR2012b(Nodes, (emlrtDCInfo *)&emlrtDCI, sp);
  }

  r1->size[1] = (int32_T)Nodes;
  emxEnsureCapacity_real_T(sp, r1, i0, &emlrtRTEI);
  if (!(Nodes >= 0.0)) {
    emlrtNonNegativeCheckR2012b(Nodes, (emlrtDCInfo *)&b_emlrtDCI, sp);
  }

  if (Nodes != (int32_T)muDoubleScalarFloor(Nodes)) {
    emlrtIntegerCheckR2012b(Nodes, (emlrtDCInfo *)&emlrtDCI, sp);
  }

  loop_ub = (int32_T)Nodes;
  for (i0 = 0; i0 < loop_ub; i0++) {
    r1->data[i0] = r[0];
  }

  for (i0 = 0; i0 < 8; i0++) {
    r2[i0] = r[1];
  }

  for (i0 = 0; i0 < 9; i0++) {
    r2[i0 + 8] = r[2];
  }

  /*  [Aeq,beq] = EqualityConstraints_LeftStartV4(CoM_x,CoM_y); */
  /*  [Aiq,biq] = InequalityConstraints_LeftStartV4(CoM_x, CoM_y, qo, r1, r2, ob_cost ,CP_x,CP_y,foot_dis); */
  /*   */
  /*  % Develop The Objective Function Matrix and Vector */
  /*  [H,f] = ObjectiveFunction_LeftStart0V4(CP_x,CP_y,vel_des(1), vel_des(2),Qx,Qy,cRx,cRy,cWx,cWy); */
  if (MPC_index[0] == 1.0) {
    /*  Develop the Constraints Matrix and Vector */
    EqFast_LeftStart1V20(*(real_T (*)[2])&states[0], *(real_T (*)[2])&states[2],
                         states[4], states[5], *(real_T (*)[3])&foot_info[0],
                         *(real_T (*)[3])&foot_info[3], beq);
    st.site = &emlrtRSI;
    IqFast_LeftStart1V20(&st, qo, r1, r2, states[4], states[5], *(real_T (*)[3])
                         &foot_info[0], *(real_T (*)[3])&foot_info[3], *(real_T
      (*)[2])&foot_info[6], Obs_Info, Aiq, biq);

    /*  Develop The Objective Function Matrix and Vector */
    /* OBJFAST_LEFTSTART1V20 */
    /*     [H,F] = OBJFAST_LEFTSTART1V20(CPX1,CPY1,IN3,IN4,IN5,IN6,CRX1,CRY1,CWX1,IN10,M1,IN12) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:19:02 */
    t2 = weights[1] * 2.0;
    t3 = weights[2] * 2.0;
    t4 = weights[3] * 2.0;
    t5 = weights[4] * 2.0;
    t6 = weights[5] * 2.0;
    t7 = weights[6] * 2.0;
    t8 = weights[5] * 20.0;
    t9 = weights[5] * 12.0;
    t10 = weights[5] * 4.0;
    t11 = weights[6] * 20.0;
    t12 = weights[6] * 12.0;
    t13 = weights[6] * 4.0;
    t14 = weights[0] * 2.0;
    t15 = weights[7] * 2.0;
    t16 = weights[9] * 2.0;
    SD->f0.t2[0] = t2;
    memset(&SD->f0.t2[1], 0, 321U * sizeof(real_T));
    SD->f0.t2[322] = t2;
    memset(&SD->f0.t2[323], 0, 321U * sizeof(real_T));
    SD->f0.t2[644] = t2;
    memset(&SD->f0.t2[645], 0, 321U * sizeof(real_T));
    SD->f0.t2[966] = t2;
    memset(&SD->f0.t2[967], 0, 160U * sizeof(real_T));
    SD->f0.t2[1127] = t3;
    memset(&SD->f0.t2[1128], 0, 160U * sizeof(real_T));
    SD->f0.t2[1288] = t2;
    memset(&SD->f0.t2[1289], 0, 321U * sizeof(real_T));
    SD->f0.t2[1610] = t2;
    memset(&SD->f0.t2[1611], 0, 321U * sizeof(real_T));
    SD->f0.t2[1932] = t2;
    memset(&SD->f0.t2[1933], 0, 321U * sizeof(real_T));
    SD->f0.t2[2254] = t2;
    memset(&SD->f0.t2[2255], 0, 160U * sizeof(real_T));
    SD->f0.t2[2415] = t3;
    memset(&SD->f0.t2[2416], 0, 160U * sizeof(real_T));
    SD->f0.t2[2576] = t2;
    memset(&SD->f0.t2[2577], 0, 321U * sizeof(real_T));
    SD->f0.t2[2898] = t2;
    memset(&SD->f0.t2[2899], 0, 321U * sizeof(real_T));
    SD->f0.t2[3220] = t2;
    memset(&SD->f0.t2[3221], 0, 321U * sizeof(real_T));
    SD->f0.t2[3542] = t2;
    memset(&SD->f0.t2[3543], 0, 160U * sizeof(real_T));
    SD->f0.t2[3703] = t3;
    memset(&SD->f0.t2[3704], 0, 160U * sizeof(real_T));
    SD->f0.t2[3864] = t2;
    memset(&SD->f0.t2[3865], 0, 321U * sizeof(real_T));
    SD->f0.t2[4186] = t2;
    memset(&SD->f0.t2[4187], 0, 321U * sizeof(real_T));
    SD->f0.t2[4508] = t2;
    memset(&SD->f0.t2[4509], 0, 321U * sizeof(real_T));
    SD->f0.t2[4830] = t2;
    memset(&SD->f0.t2[4831], 0, 160U * sizeof(real_T));
    SD->f0.t2[4991] = t3;
    memset(&SD->f0.t2[4992], 0, 160U * sizeof(real_T));
    SD->f0.t2[5152] = t2;
    memset(&SD->f0.t2[5153], 0, 321U * sizeof(real_T));
    SD->f0.t2[5474] = t4;
    memset(&SD->f0.t2[5475], 0, 321U * sizeof(real_T));
    SD->f0.t2[5796] = t4;
    memset(&SD->f0.t2[5797], 0, 321U * sizeof(real_T));
    SD->f0.t2[6118] = t4;
    memset(&SD->f0.t2[6119], 0, 321U * sizeof(real_T));
    SD->f0.t2[6440] = t4;
    memset(&SD->f0.t2[6441], 0, 160U * sizeof(real_T));
    SD->f0.t2[6601] = t5;
    memset(&SD->f0.t2[6602], 0, 160U * sizeof(real_T));
    SD->f0.t2[6762] = t4;
    memset(&SD->f0.t2[6763], 0, 321U * sizeof(real_T));
    SD->f0.t2[7084] = t4;
    memset(&SD->f0.t2[7085], 0, 321U * sizeof(real_T));
    SD->f0.t2[7406] = t4;
    memset(&SD->f0.t2[7407], 0, 321U * sizeof(real_T));
    SD->f0.t2[7728] = t4;
    memset(&SD->f0.t2[7729], 0, 160U * sizeof(real_T));
    SD->f0.t2[7889] = t5;
    memset(&SD->f0.t2[7890], 0, 160U * sizeof(real_T));
    SD->f0.t2[8050] = t4;
    memset(&SD->f0.t2[8051], 0, 321U * sizeof(real_T));
    SD->f0.t2[8372] = t4;
    memset(&SD->f0.t2[8373], 0, 321U * sizeof(real_T));
    SD->f0.t2[8694] = t4;
    memset(&SD->f0.t2[8695], 0, 321U * sizeof(real_T));
    SD->f0.t2[9016] = t4;
    memset(&SD->f0.t2[9017], 0, 160U * sizeof(real_T));
    SD->f0.t2[9177] = t5;
    memset(&SD->f0.t2[9178], 0, 160U * sizeof(real_T));
    SD->f0.t2[9338] = t4;
    memset(&SD->f0.t2[9339], 0, 321U * sizeof(real_T));
    SD->f0.t2[9660] = t4;
    memset(&SD->f0.t2[9661], 0, 321U * sizeof(real_T));
    SD->f0.t2[9982] = t4;
    memset(&SD->f0.t2[9983], 0, 321U * sizeof(real_T));
    SD->f0.t2[10304] = t4;
    memset(&SD->f0.t2[10305], 0, 160U * sizeof(real_T));
    SD->f0.t2[10465] = t5;
    memset(&SD->f0.t2[10466], 0, 160U * sizeof(real_T));
    SD->f0.t2[10626] = t4;
    memset(&SD->f0.t2[10627], 0, 804U * sizeof(real_T));
    SD->f0.t2[11431] = t6;
    memset(&SD->f0.t2[11432], 0, 30U * sizeof(real_T));
    SD->f0.t2[11462] = -t6;
    memset(&SD->f0.t2[11463], 0, 129U * sizeof(real_T));
    SD->f0.t2[11592] = t6;
    memset(&SD->f0.t2[11593], 0, 29U * sizeof(real_T));
    SD->f0.t2[11622] = -t6;
    memset(&SD->f0.t2[11623], 0, 130U * sizeof(real_T));
    SD->f0.t2[11753] = t6;
    memset(&SD->f0.t2[11754], 0, 28U * sizeof(real_T));
    SD->f0.t2[11782] = -t6;
    memset(&SD->f0.t2[11783], 0, 131U * sizeof(real_T));
    SD->f0.t2[11914] = t6;
    memset(&SD->f0.t2[11915], 0, 27U * sizeof(real_T));
    SD->f0.t2[11942] = -t6;
    memset(&SD->f0.t2[11943], 0, 132U * sizeof(real_T));
    SD->f0.t2[12075] = t6;
    memset(&SD->f0.t2[12076], 0, 26U * sizeof(real_T));
    SD->f0.t2[12102] = -t6;
    SD->f0.t2[12103] = -t6;
    memset(&SD->f0.t2[12104], 0, 132U * sizeof(real_T));
    SD->f0.t2[12236] = t6;
    memset(&SD->f0.t2[12237], 0, 25U * sizeof(real_T));
    SD->f0.t2[12262] = -t6;
    SD->f0.t2[12263] = -t6;
    memset(&SD->f0.t2[12264], 0, 133U * sizeof(real_T));
    SD->f0.t2[12397] = t6;
    memset(&SD->f0.t2[12398], 0, 24U * sizeof(real_T));
    SD->f0.t2[12422] = -t6;
    SD->f0.t2[12423] = -t6;
    memset(&SD->f0.t2[12424], 0, 134U * sizeof(real_T));
    SD->f0.t2[12558] = t6;
    memset(&SD->f0.t2[12559], 0, 23U * sizeof(real_T));
    SD->f0.t2[12582] = -t6;
    SD->f0.t2[12583] = -t6;
    memset(&SD->f0.t2[12584], 0, 135U * sizeof(real_T));
    SD->f0.t2[12719] = t6;
    memset(&SD->f0.t2[12720], 0, 22U * sizeof(real_T));
    SD->f0.t2[12742] = -t6;
    SD->f0.t2[12743] = -t6;
    SD->f0.t2[12744] = -t6;
    memset(&SD->f0.t2[12745], 0, 135U * sizeof(real_T));
    SD->f0.t2[12880] = t6;
    memset(&SD->f0.t2[12881], 0, 21U * sizeof(real_T));
    SD->f0.t2[12902] = -t6;
    SD->f0.t2[12903] = -t6;
    SD->f0.t2[12904] = -t6;
    memset(&SD->f0.t2[12905], 0, 136U * sizeof(real_T));
    SD->f0.t2[13041] = t6;
    memset(&SD->f0.t2[13042], 0, 20U * sizeof(real_T));
    SD->f0.t2[13062] = -t6;
    SD->f0.t2[13063] = -t6;
    SD->f0.t2[13064] = -t6;
    memset(&SD->f0.t2[13065], 0, 137U * sizeof(real_T));
    SD->f0.t2[13202] = t6;
    memset(&SD->f0.t2[13203], 0, 19U * sizeof(real_T));
    SD->f0.t2[13222] = -t6;
    SD->f0.t2[13223] = -t6;
    SD->f0.t2[13224] = -t6;
    memset(&SD->f0.t2[13225], 0, 138U * sizeof(real_T));
    SD->f0.t2[13363] = t6;
    memset(&SD->f0.t2[13364], 0, 18U * sizeof(real_T));
    SD->f0.t2[13382] = -t6;
    SD->f0.t2[13383] = -t6;
    SD->f0.t2[13384] = -t6;
    SD->f0.t2[13385] = -t6;
    memset(&SD->f0.t2[13386], 0, 138U * sizeof(real_T));
    SD->f0.t2[13524] = t6;
    memset(&SD->f0.t2[13525], 0, 17U * sizeof(real_T));
    SD->f0.t2[13542] = -t6;
    SD->f0.t2[13543] = -t6;
    SD->f0.t2[13544] = -t6;
    SD->f0.t2[13545] = -t6;
    memset(&SD->f0.t2[13546], 0, 622U * sizeof(real_T));
    SD->f0.t2[14168] = t7;
    memset(&SD->f0.t2[14169], 0, 17U * sizeof(real_T));
    SD->f0.t2[14186] = -t7;
    memset(&SD->f0.t2[14187], 0, 142U * sizeof(real_T));
    SD->f0.t2[14329] = t7;
    memset(&SD->f0.t2[14330], 0, sizeof(real_T) << 4);
    SD->f0.t2[14346] = -t7;
    memset(&SD->f0.t2[14347], 0, 143U * sizeof(real_T));
    SD->f0.t2[14490] = t7;
    memset(&SD->f0.t2[14491], 0, 15U * sizeof(real_T));
    SD->f0.t2[14506] = -t7;
    memset(&SD->f0.t2[14507], 0, 144U * sizeof(real_T));
    SD->f0.t2[14651] = t7;
    memset(&SD->f0.t2[14652], 0, 14U * sizeof(real_T));
    SD->f0.t2[14666] = -t7;
    memset(&SD->f0.t2[14667], 0, 145U * sizeof(real_T));
    SD->f0.t2[14812] = t7;
    memset(&SD->f0.t2[14813], 0, 13U * sizeof(real_T));
    SD->f0.t2[14826] = -t7;
    SD->f0.t2[14827] = -t7;
    memset(&SD->f0.t2[14828], 0, 145U * sizeof(real_T));
    SD->f0.t2[14973] = t7;
    memset(&SD->f0.t2[14974], 0, 12U * sizeof(real_T));
    SD->f0.t2[14986] = -t7;
    SD->f0.t2[14987] = -t7;
    memset(&SD->f0.t2[14988], 0, 146U * sizeof(real_T));
    SD->f0.t2[15134] = t7;
    memset(&SD->f0.t2[15135], 0, 11U * sizeof(real_T));
    SD->f0.t2[15146] = -t7;
    SD->f0.t2[15147] = -t7;
    memset(&SD->f0.t2[15148], 0, 147U * sizeof(real_T));
    SD->f0.t2[15295] = t7;
    memset(&SD->f0.t2[15296], 0, 10U * sizeof(real_T));
    SD->f0.t2[15306] = -t7;
    SD->f0.t2[15307] = -t7;
    memset(&SD->f0.t2[15308], 0, 148U * sizeof(real_T));
    SD->f0.t2[15456] = t7;
    memset(&SD->f0.t2[15457], 0, 9U * sizeof(real_T));
    SD->f0.t2[15466] = -t7;
    SD->f0.t2[15467] = -t7;
    SD->f0.t2[15468] = -t7;
    memset(&SD->f0.t2[15469], 0, 148U * sizeof(real_T));
    SD->f0.t2[15617] = t7;
    memset(&SD->f0.t2[15618], 0, sizeof(real_T) << 3);
    SD->f0.t2[15626] = -t7;
    SD->f0.t2[15627] = -t7;
    SD->f0.t2[15628] = -t7;
    memset(&SD->f0.t2[15629], 0, 149U * sizeof(real_T));
    SD->f0.t2[15778] = t7;
    SD->f0.t2[15779] = 0.0;
    SD->f0.t2[15780] = 0.0;
    SD->f0.t2[15781] = 0.0;
    SD->f0.t2[15782] = 0.0;
    SD->f0.t2[15783] = 0.0;
    SD->f0.t2[15784] = 0.0;
    SD->f0.t2[15785] = 0.0;
    SD->f0.t2[15786] = -t7;
    SD->f0.t2[15787] = -t7;
    SD->f0.t2[15788] = -t7;
    memset(&SD->f0.t2[15789], 0, 150U * sizeof(real_T));
    SD->f0.t2[15939] = t7;
    SD->f0.t2[15940] = 0.0;
    SD->f0.t2[15941] = 0.0;
    SD->f0.t2[15942] = 0.0;
    SD->f0.t2[15943] = 0.0;
    SD->f0.t2[15944] = 0.0;
    SD->f0.t2[15945] = 0.0;
    SD->f0.t2[15946] = -t7;
    SD->f0.t2[15947] = -t7;
    SD->f0.t2[15948] = -t7;
    memset(&SD->f0.t2[15949], 0, 151U * sizeof(real_T));
    SD->f0.t2[16100] = t7;
    SD->f0.t2[16101] = 0.0;
    SD->f0.t2[16102] = 0.0;
    SD->f0.t2[16103] = 0.0;
    SD->f0.t2[16104] = 0.0;
    SD->f0.t2[16105] = 0.0;
    SD->f0.t2[16106] = -t7;
    SD->f0.t2[16107] = -t7;
    SD->f0.t2[16108] = -t7;
    SD->f0.t2[16109] = -t7;
    memset(&SD->f0.t2[16110], 0, 151U * sizeof(real_T));
    SD->f0.t2[16261] = t7;
    SD->f0.t2[16262] = 0.0;
    SD->f0.t2[16263] = 0.0;
    SD->f0.t2[16264] = 0.0;
    SD->f0.t2[16265] = 0.0;
    SD->f0.t2[16266] = -t7;
    SD->f0.t2[16267] = -t7;
    SD->f0.t2[16268] = -t7;
    SD->f0.t2[16269] = -t7;
    memset(&SD->f0.t2[16270], 0, 121U * sizeof(real_T));
    SD->f0.t2[16391] = -t6;
    SD->f0.t2[16392] = -t6;
    SD->f0.t2[16393] = -t6;
    SD->f0.t2[16394] = -t6;
    SD->f0.t2[16395] = -t6;
    SD->f0.t2[16396] = -t6;
    SD->f0.t2[16397] = -t6;
    SD->f0.t2[16398] = -t6;
    SD->f0.t2[16399] = -t6;
    SD->f0.t2[16400] = -t6;
    SD->f0.t2[16401] = -t6;
    SD->f0.t2[16402] = -t6;
    SD->f0.t2[16403] = -t6;
    SD->f0.t2[16404] = -t6;
    memset(&SD->f0.t2[16405], 0, 17U * sizeof(real_T));
    SD->f0.t2[16422] = weights[5] * 28.0;
    SD->f0.t2[16423] = t8;
    SD->f0.t2[16424] = t9;
    SD->f0.t2[16425] = t10;
    memset(&SD->f0.t2[16426], 0, 129U * sizeof(real_T));
    SD->f0.t2[16555] = -t6;
    SD->f0.t2[16556] = -t6;
    SD->f0.t2[16557] = -t6;
    SD->f0.t2[16558] = -t6;
    SD->f0.t2[16559] = -t6;
    SD->f0.t2[16560] = -t6;
    SD->f0.t2[16561] = -t6;
    SD->f0.t2[16562] = -t6;
    SD->f0.t2[16563] = -t6;
    SD->f0.t2[16564] = -t6;
    memset(&SD->f0.t2[16565], 0, 17U * sizeof(real_T));
    SD->f0.t2[16582] = t8;
    SD->f0.t2[16583] = t8;
    SD->f0.t2[16584] = t9;
    SD->f0.t2[16585] = t10;
    memset(&SD->f0.t2[16586], 0, 133U * sizeof(real_T));
    SD->f0.t2[16719] = -t6;
    SD->f0.t2[16720] = -t6;
    SD->f0.t2[16721] = -t6;
    SD->f0.t2[16722] = -t6;
    SD->f0.t2[16723] = -t6;
    SD->f0.t2[16724] = -t6;
    memset(&SD->f0.t2[16725], 0, 17U * sizeof(real_T));
    SD->f0.t2[16742] = t9;
    SD->f0.t2[16743] = t9;
    SD->f0.t2[16744] = t9;
    SD->f0.t2[16745] = t10;
    memset(&SD->f0.t2[16746], 0, 137U * sizeof(real_T));
    SD->f0.t2[16883] = -t6;
    SD->f0.t2[16884] = -t6;
    memset(&SD->f0.t2[16885], 0, 17U * sizeof(real_T));
    SD->f0.t2[16902] = t10;
    SD->f0.t2[16903] = t10;
    SD->f0.t2[16904] = t10;
    SD->f0.t2[16905] = t10;
    memset(&SD->f0.t2[16906], 0, 142U * sizeof(real_T));
    SD->f0.t2[17048] = -t7;
    SD->f0.t2[17049] = -t7;
    SD->f0.t2[17050] = -t7;
    SD->f0.t2[17051] = -t7;
    SD->f0.t2[17052] = -t7;
    SD->f0.t2[17053] = -t7;
    SD->f0.t2[17054] = -t7;
    SD->f0.t2[17055] = -t7;
    SD->f0.t2[17056] = -t7;
    SD->f0.t2[17057] = -t7;
    SD->f0.t2[17058] = -t7;
    SD->f0.t2[17059] = -t7;
    SD->f0.t2[17060] = -t7;
    SD->f0.t2[17061] = -t7;
    SD->f0.t2[17062] = 0.0;
    SD->f0.t2[17063] = 0.0;
    SD->f0.t2[17064] = 0.0;
    SD->f0.t2[17065] = 0.0;
    SD->f0.t2[17066] = weights[6] * 28.0;
    SD->f0.t2[17067] = t11;
    SD->f0.t2[17068] = t12;
    SD->f0.t2[17069] = t13;
    memset(&SD->f0.t2[17070], 0, 142U * sizeof(real_T));
    SD->f0.t2[17212] = -t7;
    SD->f0.t2[17213] = -t7;
    SD->f0.t2[17214] = -t7;
    SD->f0.t2[17215] = -t7;
    SD->f0.t2[17216] = -t7;
    SD->f0.t2[17217] = -t7;
    SD->f0.t2[17218] = -t7;
    SD->f0.t2[17219] = -t7;
    SD->f0.t2[17220] = -t7;
    SD->f0.t2[17221] = -t7;
    SD->f0.t2[17222] = 0.0;
    SD->f0.t2[17223] = 0.0;
    SD->f0.t2[17224] = 0.0;
    SD->f0.t2[17225] = 0.0;
    SD->f0.t2[17226] = t11;
    SD->f0.t2[17227] = t11;
    SD->f0.t2[17228] = t12;
    SD->f0.t2[17229] = t13;
    memset(&SD->f0.t2[17230], 0, 146U * sizeof(real_T));
    SD->f0.t2[17376] = -t7;
    SD->f0.t2[17377] = -t7;
    SD->f0.t2[17378] = -t7;
    SD->f0.t2[17379] = -t7;
    SD->f0.t2[17380] = -t7;
    SD->f0.t2[17381] = -t7;
    SD->f0.t2[17382] = 0.0;
    SD->f0.t2[17383] = 0.0;
    SD->f0.t2[17384] = 0.0;
    SD->f0.t2[17385] = 0.0;
    SD->f0.t2[17386] = t12;
    SD->f0.t2[17387] = t12;
    SD->f0.t2[17388] = t12;
    SD->f0.t2[17389] = t13;
    memset(&SD->f0.t2[17390], 0, 150U * sizeof(real_T));
    SD->f0.t2[17540] = -t7;
    SD->f0.t2[17541] = -t7;
    SD->f0.t2[17542] = 0.0;
    SD->f0.t2[17543] = 0.0;
    SD->f0.t2[17544] = 0.0;
    SD->f0.t2[17545] = 0.0;
    SD->f0.t2[17546] = t13;
    SD->f0.t2[17547] = t13;
    SD->f0.t2[17548] = t13;
    SD->f0.t2[17549] = t13;
    memset(&SD->f0.t2[17550], 0, 160U * sizeof(real_T));
    SD->f0.t2[17710] = t14;
    memset(&SD->f0.t2[17711], 0, 160U * sizeof(real_T));
    SD->f0.t2[17871] = t14;
    memset(&SD->f0.t2[17872], 0, 160U * sizeof(real_T));
    SD->f0.t2[18032] = t14;
    memset(&SD->f0.t2[18033], 0, 160U * sizeof(real_T));
    SD->f0.t2[18193] = t14;
    memset(&SD->f0.t2[18194], 0, 160U * sizeof(real_T));
    SD->f0.t2[18354] = t14;
    memset(&SD->f0.t2[18355], 0, 160U * sizeof(real_T));
    SD->f0.t2[18515] = t14;
    memset(&SD->f0.t2[18516], 0, 160U * sizeof(real_T));
    SD->f0.t2[18676] = t14;
    memset(&SD->f0.t2[18677], 0, 160U * sizeof(real_T));
    SD->f0.t2[18837] = t14;
    memset(&SD->f0.t2[18838], 0, 160U * sizeof(real_T));
    SD->f0.t2[18998] = t14;
    memset(&SD->f0.t2[18999], 0, 160U * sizeof(real_T));
    SD->f0.t2[19159] = t14;
    memset(&SD->f0.t2[19160], 0, 160U * sizeof(real_T));
    SD->f0.t2[19320] = t14;
    memset(&SD->f0.t2[19321], 0, 160U * sizeof(real_T));
    SD->f0.t2[19481] = t14;
    memset(&SD->f0.t2[19482], 0, 160U * sizeof(real_T));
    SD->f0.t2[19642] = t14;
    memset(&SD->f0.t2[19643], 0, 160U * sizeof(real_T));
    SD->f0.t2[19803] = t14;
    memset(&SD->f0.t2[19804], 0, 160U * sizeof(real_T));
    SD->f0.t2[19964] = t14;
    memset(&SD->f0.t2[19965], 0, 160U * sizeof(real_T));
    SD->f0.t2[20125] = t14;
    memset(&SD->f0.t2[20126], 0, 160U * sizeof(real_T));
    SD->f0.t2[20286] = t14;
    memset(&SD->f0.t2[20287], 0, 160U * sizeof(real_T));
    SD->f0.t2[20447] = weights[8] * 2.0;
    memset(&SD->f0.t2[20448], 0, 2736U * sizeof(real_T));
    SD->f0.t2[23184] = t6;
    memset(&SD->f0.t2[23185], 0, 160U * sizeof(real_T));
    SD->f0.t2[23345] = t6;
    memset(&SD->f0.t2[23346], 0, 160U * sizeof(real_T));
    SD->f0.t2[23506] = t6;
    memset(&SD->f0.t2[23507], 0, 160U * sizeof(real_T));
    SD->f0.t2[23667] = t6;
    memset(&SD->f0.t2[23668], 0, 160U * sizeof(real_T));
    SD->f0.t2[23828] = t7;
    memset(&SD->f0.t2[23829], 0, 160U * sizeof(real_T));
    SD->f0.t2[23989] = t7;
    memset(&SD->f0.t2[23990], 0, 160U * sizeof(real_T));
    SD->f0.t2[24150] = t7;
    memset(&SD->f0.t2[24151], 0, 160U * sizeof(real_T));
    SD->f0.t2[24311] = t7;
    memset(&SD->f0.t2[24312], 0, 160U * sizeof(real_T));
    SD->f0.t2[24472] = t15;
    memset(&SD->f0.t2[24473], 0, 160U * sizeof(real_T));
    SD->f0.t2[24633] = t15;
    memset(&SD->f0.t2[24634], 0, 160U * sizeof(real_T));
    SD->f0.t2[24794] = t15;
    memset(&SD->f0.t2[24795], 0, 160U * sizeof(real_T));
    SD->f0.t2[24955] = t15;
    memset(&SD->f0.t2[24956], 0, 160U * sizeof(real_T));
    SD->f0.t2[25116] = t16;
    memset(&SD->f0.t2[25117], 0, 160U * sizeof(real_T));
    SD->f0.t2[25277] = t16;
    memset(&SD->f0.t2[25278], 0, 160U * sizeof(real_T));
    SD->f0.t2[25438] = t16;
    memset(&SD->f0.t2[25439], 0, 160U * sizeof(real_T));
    SD->f0.t2[25599] = t16;
    for (i0 = 0; i0 < 160; i0++) {
      memcpy(&H[i0 * 160], &SD->f0.t2[i0 * 160], 160U * sizeof(real_T));
    }

    f[0] = weights[1] * states_ref[0] * -2.0;
    f[1] = 0.0;
    f[2] = weights[1] * states_ref[0] * -2.0;
    f[3] = 0.0;
    f[4] = weights[1] * states_ref[0] * -2.0;
    f[5] = 0.0;
    f[6] = weights[1] * states_ref[0] * -2.0;
    f[7] = weights[2] * states_ref[1] * -2.0;
    f[8] = weights[1] * states_ref[0] * -2.0;
    f[9] = 0.0;
    f[10] = weights[1] * states_ref[0] * -2.0;
    f[11] = 0.0;
    f[12] = weights[1] * states_ref[0] * -2.0;
    f[13] = 0.0;
    f[14] = weights[1] * states_ref[0] * -2.0;
    f[15] = weights[2] * states_ref[2] * -2.0;
    f[16] = weights[1] * states_ref[0] * -2.0;
    f[17] = 0.0;
    f[18] = weights[1] * states_ref[0] * -2.0;
    f[19] = 0.0;
    f[20] = weights[1] * states_ref[0] * -2.0;
    f[21] = 0.0;
    f[22] = weights[1] * states_ref[0] * -2.0;
    f[23] = weights[2] * states_ref[3] * -2.0;
    f[24] = weights[1] * states_ref[0] * -2.0;
    f[25] = 0.0;
    f[26] = weights[1] * states_ref[0] * -2.0;
    f[27] = 0.0;
    f[28] = weights[1] * states_ref[0] * -2.0;
    f[29] = 0.0;
    f[30] = weights[1] * states_ref[0] * -2.0;
    f[31] = weights[2] * states_ref[4] * -2.0;
    f[32] = weights[1] * states_ref[0] * -2.0;
    f[33] = 0.0;
    f[34] = weights[3] * states_ref[5] * -2.0;
    f[35] = 0.0;
    f[36] = weights[3] * states_ref[5] * -2.0;
    f[37] = 0.0;
    f[38] = weights[3] * states_ref[5] * -2.0;
    f[39] = 0.0;
    f[40] = weights[3] * states_ref[5] * -2.0;
    f[41] = weights[4] * states_ref[6] * -2.0;
    f[42] = weights[3] * states_ref[5] * -2.0;
    f[43] = 0.0;
    f[44] = weights[3] * states_ref[5] * -2.0;
    f[45] = 0.0;
    f[46] = weights[3] * states_ref[5] * -2.0;
    f[47] = 0.0;
    f[48] = weights[3] * states_ref[5] * -2.0;
    f[49] = weights[4] * states_ref[7] * -2.0;
    f[50] = weights[3] * states_ref[5] * -2.0;
    f[51] = 0.0;
    f[52] = weights[3] * states_ref[5] * -2.0;
    f[53] = 0.0;
    f[54] = weights[3] * states_ref[5] * -2.0;
    f[55] = 0.0;
    f[56] = weights[3] * states_ref[5] * -2.0;
    f[57] = weights[4] * states_ref[8] * -2.0;
    f[58] = weights[3] * states_ref[5] * -2.0;
    f[59] = 0.0;
    f[60] = weights[3] * states_ref[5] * -2.0;
    f[61] = 0.0;
    f[62] = weights[3] * states_ref[5] * -2.0;
    f[63] = 0.0;
    f[64] = weights[3] * states_ref[5] * -2.0;
    f[65] = weights[4] * states_ref[9] * -2.0;
    f[66] = weights[3] * states_ref[5] * -2.0;
    f[67] = 0.0;
    f[68] = 0.0;
    f[69] = 0.0;
    f[70] = 0.0;
    f[71] = states[4] * weights[5] * -2.0;
    f[72] = states[4] * weights[5] * -2.0;
    f[73] = states[4] * weights[5] * -2.0;
    f[74] = states[4] * weights[5] * -2.0;
    f[75] = states[4] * weights[5] * -2.0;
    f[76] = states[4] * weights[5] * -2.0;
    f[77] = states[4] * weights[5] * -2.0;
    f[78] = states[4] * weights[5] * -2.0;
    f[79] = states[4] * weights[5] * -2.0;
    f[80] = states[4] * weights[5] * -2.0;
    f[81] = states[4] * weights[5] * -2.0;
    f[82] = states[4] * weights[5] * -2.0;
    f[83] = states[4] * weights[5] * -2.0;
    f[84] = states[4] * weights[5] * -2.0;
    f[85] = 0.0;
    f[86] = 0.0;
    f[87] = 0.0;
    f[88] = states[5] * weights[6] * -2.0;
    f[89] = states[5] * weights[6] * -2.0;
    f[90] = states[5] * weights[6] * -2.0;
    f[91] = states[5] * weights[6] * -2.0;
    f[92] = states[5] * weights[6] * -2.0;
    f[93] = states[5] * weights[6] * -2.0;
    f[94] = states[5] * weights[6] * -2.0;
    f[95] = states[5] * weights[6] * -2.0;
    f[96] = states[5] * weights[6] * -2.0;
    f[97] = states[5] * weights[6] * -2.0;
    f[98] = states[5] * weights[6] * -2.0;
    f[99] = states[5] * weights[6] * -2.0;
    f[100] = states[5] * weights[6] * -2.0;
    f[101] = states[5] * weights[6] * -2.0;
    f[102] = states[4] * weights[5] * 28.0;
    f[103] = states[4] * weights[5] * 20.0;
    f[104] = states[4] * weights[5] * 12.0;
    f[105] = states[4] * weights[5] * 4.0;
    f[106] = states[5] * weights[6] * 28.0;
    f[107] = states[5] * weights[6] * 20.0;
    f[108] = states[5] * weights[6] * 12.0;
    f[109] = states[5] * weights[6] * 4.0;
    memset(&f[110], 0, 50U * sizeof(real_T));
  } else {
    /*  Develop the Constraints Matrix and Vector */
    /* EQFAST_RIGHTSTART1V20 */
    /*     [AEQ,BEQ] = EQFAST_RIGHTSTART1V20(IN1,IN2,CPX1,CPY1,IN5,IN6) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:19:16 */
    t2 = states[4] - foot_info[2];
    t3 = states[5] - foot_info[5];
    t4 = states[5] + foot_info[5];
    memset(&beq[0], 0, sizeof(real_T) << 6);
    beq[64] = states[0];
    beq[65] = states[1];
    beq[66] = states[2];
    beq[67] = states[3];
    beq[68] = t2;
    beq[69] = t2;
    beq[70] = t2;
    beq[71] = t2;
    beq[72] = t3;
    beq[73] = t4;
    beq[74] = t3;
    beq[75] = t4;
    st.site = &b_emlrtRSI;

    /* IQFAST_RIGHTSTART1V20 */
    /*     [AIQ,BIQ] = IQFAST_RIGHTSTART1V20(IN1,IN2,IN3,IN4,IN5,CPX1,CPY1,IN8,IN9,IN10,IN11) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:19:29 */
    i0 = r1->size[1];
    if (!(1 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(1, 1, i0, (emlrtBCInfo *)&h_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(2 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(2, 1, i0, (emlrtBCInfo *)&g_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(3 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(3, 1, i0, (emlrtBCInfo *)&f_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(4 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(4, 1, i0, (emlrtBCInfo *)&e_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(5 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(5, 1, i0, (emlrtBCInfo *)&d_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(6 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(6, 1, i0, (emlrtBCInfo *)&c_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(7 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(7, 1, i0, (emlrtBCInfo *)&b_emlrtBCI, &st);
    }

    i0 = r1->size[1];
    if (!(8 <= i0)) {
      emlrtDynamicBoundsCheckR2012b(8, 1, i0, (emlrtBCInfo *)&emlrtBCI, &st);
    }

    SD->f0.dv1[0] = -1.0;
    memset(&SD->f0.dv1[1], 0, 33U * sizeof(real_T));
    SD->f0.dv1[34] = 1.0;
    memset(&SD->f0.dv1[35], 0, 33U * sizeof(real_T));
    SD->f0.dv1[68] = -Obs_Info[2];
    memset(&SD->f0.dv1[69], 0, 24U * sizeof(real_T));
    SD->f0.dv1[93] = -Obs_Info[2];
    memset(&SD->f0.dv1[94], 0, 153U * sizeof(real_T));
    SD->f0.dv1[247] = -1.0;
    memset(&SD->f0.dv1[248], 0, 33U * sizeof(real_T));
    SD->f0.dv1[281] = 1.0;
    memset(&SD->f0.dv1[282], 0, 33U * sizeof(real_T));
    SD->f0.dv1[315] = -Obs_Info[2];
    memset(&SD->f0.dv1[316], 0, 24U * sizeof(real_T));
    SD->f0.dv1[340] = -Obs_Info[2];
    memset(&SD->f0.dv1[341], 0, 153U * sizeof(real_T));
    SD->f0.dv1[494] = -1.0;
    memset(&SD->f0.dv1[495], 0, 33U * sizeof(real_T));
    SD->f0.dv1[528] = 1.0;
    memset(&SD->f0.dv1[529], 0, 33U * sizeof(real_T));
    SD->f0.dv1[562] = -Obs_Info[2];
    memset(&SD->f0.dv1[563], 0, 24U * sizeof(real_T));
    SD->f0.dv1[587] = -Obs_Info[2];
    memset(&SD->f0.dv1[588], 0, 153U * sizeof(real_T));
    SD->f0.dv1[741] = -1.0;
    memset(&SD->f0.dv1[742], 0, 33U * sizeof(real_T));
    SD->f0.dv1[775] = 1.0;
    memset(&SD->f0.dv1[776], 0, 33U * sizeof(real_T));
    SD->f0.dv1[809] = -Obs_Info[2];
    memset(&SD->f0.dv1[810], 0, 24U * sizeof(real_T));
    SD->f0.dv1[834] = -Obs_Info[2];
    memset(&SD->f0.dv1[835], 0, 153U * sizeof(real_T));
    SD->f0.dv1[988] = -1.0;
    memset(&SD->f0.dv1[989], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1022] = 1.0;
    memset(&SD->f0.dv1[1023], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1056] = -Obs_Info[2];
    memset(&SD->f0.dv1[1057], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1081] = -Obs_Info[2];
    memset(&SD->f0.dv1[1082], 0, 153U * sizeof(real_T));
    SD->f0.dv1[1235] = -1.0;
    memset(&SD->f0.dv1[1236], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1269] = 1.0;
    memset(&SD->f0.dv1[1270], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1303] = -Obs_Info[2];
    memset(&SD->f0.dv1[1304], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1328] = -Obs_Info[2];
    memset(&SD->f0.dv1[1329], 0, 153U * sizeof(real_T));
    SD->f0.dv1[1482] = -1.0;
    memset(&SD->f0.dv1[1483], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1516] = 1.0;
    memset(&SD->f0.dv1[1517], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1550] = -Obs_Info[2];
    memset(&SD->f0.dv1[1551], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1575] = -Obs_Info[2];
    memset(&SD->f0.dv1[1576], 0, 153U * sizeof(real_T));
    SD->f0.dv1[1729] = -1.0;
    memset(&SD->f0.dv1[1730], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1763] = 1.0;
    memset(&SD->f0.dv1[1764], 0, 33U * sizeof(real_T));
    SD->f0.dv1[1797] = -Obs_Info[2];
    memset(&SD->f0.dv1[1798], 0, 24U * sizeof(real_T));
    SD->f0.dv1[1822] = -Obs_Info[2];
    memset(&SD->f0.dv1[1823], 0, 153U * sizeof(real_T));
    SD->f0.dv1[1976] = -1.0;
    memset(&SD->f0.dv1[1977], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2010] = 1.0;
    memset(&SD->f0.dv1[2011], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2069] = -qo[2];
    memset(&SD->f0.dv1[2070], 0, 153U * sizeof(real_T));
    SD->f0.dv1[2223] = -1.0;
    memset(&SD->f0.dv1[2224], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2257] = 1.0;
    memset(&SD->f0.dv1[2258], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2316] = -qo[2];
    memset(&SD->f0.dv1[2317], 0, 153U * sizeof(real_T));
    SD->f0.dv1[2470] = -1.0;
    memset(&SD->f0.dv1[2471], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2504] = 1.0;
    memset(&SD->f0.dv1[2505], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2563] = -qo[2];
    memset(&SD->f0.dv1[2564], 0, 153U * sizeof(real_T));
    SD->f0.dv1[2717] = -1.0;
    memset(&SD->f0.dv1[2718], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2751] = 1.0;
    memset(&SD->f0.dv1[2752], 0, 58U * sizeof(real_T));
    SD->f0.dv1[2810] = -qo[2];
    memset(&SD->f0.dv1[2811], 0, 153U * sizeof(real_T));
    SD->f0.dv1[2964] = -1.0;
    memset(&SD->f0.dv1[2965], 0, 33U * sizeof(real_T));
    SD->f0.dv1[2998] = 1.0;
    memset(&SD->f0.dv1[2999], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3057] = -qo[2];
    memset(&SD->f0.dv1[3058], 0, 153U * sizeof(real_T));
    SD->f0.dv1[3211] = -1.0;
    memset(&SD->f0.dv1[3212], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3245] = 1.0;
    memset(&SD->f0.dv1[3246], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3304] = -qo[2];
    memset(&SD->f0.dv1[3305], 0, 153U * sizeof(real_T));
    SD->f0.dv1[3458] = -1.0;
    memset(&SD->f0.dv1[3459], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3492] = 1.0;
    memset(&SD->f0.dv1[3493], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3551] = -qo[2];
    memset(&SD->f0.dv1[3552], 0, 153U * sizeof(real_T));
    SD->f0.dv1[3705] = -1.0;
    memset(&SD->f0.dv1[3706], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3739] = 1.0;
    memset(&SD->f0.dv1[3740], 0, 58U * sizeof(real_T));
    SD->f0.dv1[3798] = -qo[2];
    memset(&SD->f0.dv1[3799], 0, 153U * sizeof(real_T));
    SD->f0.dv1[3952] = -1.0;
    memset(&SD->f0.dv1[3953], 0, 33U * sizeof(real_T));
    SD->f0.dv1[3986] = 1.0;
    memset(&SD->f0.dv1[3987], 0, 58U * sizeof(real_T));
    SD->f0.dv1[4045] = -qo[2];
    memset(&SD->f0.dv1[4046], 0, 153U * sizeof(real_T));
    SD->f0.dv1[4199] = -1.0;
    memset(&SD->f0.dv1[4200], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4233] = 1.0;
    memset(&SD->f0.dv1[4234], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4250] = -Obs_Info[3];
    memset(&SD->f0.dv1[4251], 0, 24U * sizeof(real_T));
    SD->f0.dv1[4275] = -Obs_Info[3];
    memset(&SD->f0.dv1[4276], 0, 170U * sizeof(real_T));
    SD->f0.dv1[4446] = -1.0;
    memset(&SD->f0.dv1[4447], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4480] = 1.0;
    memset(&SD->f0.dv1[4481], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4497] = -Obs_Info[3];
    memset(&SD->f0.dv1[4498], 0, 24U * sizeof(real_T));
    SD->f0.dv1[4522] = -Obs_Info[3];
    memset(&SD->f0.dv1[4523], 0, 170U * sizeof(real_T));
    SD->f0.dv1[4693] = -1.0;
    memset(&SD->f0.dv1[4694], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4727] = 1.0;
    memset(&SD->f0.dv1[4728], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4744] = -Obs_Info[3];
    memset(&SD->f0.dv1[4745], 0, 24U * sizeof(real_T));
    SD->f0.dv1[4769] = -Obs_Info[3];
    memset(&SD->f0.dv1[4770], 0, 170U * sizeof(real_T));
    SD->f0.dv1[4940] = -1.0;
    memset(&SD->f0.dv1[4941], 0, 33U * sizeof(real_T));
    SD->f0.dv1[4974] = 1.0;
    memset(&SD->f0.dv1[4975], 0, sizeof(real_T) << 4);
    SD->f0.dv1[4991] = -Obs_Info[3];
    memset(&SD->f0.dv1[4992], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5016] = -Obs_Info[3];
    memset(&SD->f0.dv1[5017], 0, 170U * sizeof(real_T));
    SD->f0.dv1[5187] = -1.0;
    memset(&SD->f0.dv1[5188], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5221] = 1.0;
    memset(&SD->f0.dv1[5222], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5238] = -Obs_Info[3];
    memset(&SD->f0.dv1[5239], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5263] = -Obs_Info[3];
    memset(&SD->f0.dv1[5264], 0, 170U * sizeof(real_T));
    SD->f0.dv1[5434] = -1.0;
    memset(&SD->f0.dv1[5435], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5468] = 1.0;
    memset(&SD->f0.dv1[5469], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5485] = -Obs_Info[3];
    memset(&SD->f0.dv1[5486], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5510] = -Obs_Info[3];
    memset(&SD->f0.dv1[5511], 0, 170U * sizeof(real_T));
    SD->f0.dv1[5681] = -1.0;
    memset(&SD->f0.dv1[5682], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5715] = 1.0;
    memset(&SD->f0.dv1[5716], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5732] = -Obs_Info[3];
    memset(&SD->f0.dv1[5733], 0, 24U * sizeof(real_T));
    SD->f0.dv1[5757] = -Obs_Info[3];
    memset(&SD->f0.dv1[5758], 0, 170U * sizeof(real_T));
    SD->f0.dv1[5928] = -1.0;
    memset(&SD->f0.dv1[5929], 0, 33U * sizeof(real_T));
    SD->f0.dv1[5962] = 1.0;
    memset(&SD->f0.dv1[5963], 0, sizeof(real_T) << 4);
    SD->f0.dv1[5979] = -Obs_Info[3];
    memset(&SD->f0.dv1[5980], 0, 24U * sizeof(real_T));
    SD->f0.dv1[6004] = -Obs_Info[3];
    memset(&SD->f0.dv1[6005], 0, 170U * sizeof(real_T));
    SD->f0.dv1[6175] = -1.0;
    memset(&SD->f0.dv1[6176], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6209] = 1.0;
    memset(&SD->f0.dv1[6210], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6251] = -qo[3];
    memset(&SD->f0.dv1[6252], 0, 170U * sizeof(real_T));
    SD->f0.dv1[6422] = -1.0;
    memset(&SD->f0.dv1[6423], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6456] = 1.0;
    memset(&SD->f0.dv1[6457], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6498] = -qo[3];
    memset(&SD->f0.dv1[6499], 0, 170U * sizeof(real_T));
    SD->f0.dv1[6669] = -1.0;
    memset(&SD->f0.dv1[6670], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6703] = 1.0;
    memset(&SD->f0.dv1[6704], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6745] = -qo[3];
    memset(&SD->f0.dv1[6746], 0, 170U * sizeof(real_T));
    SD->f0.dv1[6916] = -1.0;
    memset(&SD->f0.dv1[6917], 0, 33U * sizeof(real_T));
    SD->f0.dv1[6950] = 1.0;
    memset(&SD->f0.dv1[6951], 0, 41U * sizeof(real_T));
    SD->f0.dv1[6992] = -qo[3];
    memset(&SD->f0.dv1[6993], 0, 170U * sizeof(real_T));
    SD->f0.dv1[7163] = -1.0;
    memset(&SD->f0.dv1[7164], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7197] = 1.0;
    memset(&SD->f0.dv1[7198], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7239] = -qo[3];
    memset(&SD->f0.dv1[7240], 0, 170U * sizeof(real_T));
    SD->f0.dv1[7410] = -1.0;
    memset(&SD->f0.dv1[7411], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7444] = 1.0;
    memset(&SD->f0.dv1[7445], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7486] = -qo[3];
    memset(&SD->f0.dv1[7487], 0, 170U * sizeof(real_T));
    SD->f0.dv1[7657] = -1.0;
    memset(&SD->f0.dv1[7658], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7691] = 1.0;
    memset(&SD->f0.dv1[7692], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7733] = -qo[3];
    memset(&SD->f0.dv1[7734], 0, 170U * sizeof(real_T));
    SD->f0.dv1[7904] = -1.0;
    memset(&SD->f0.dv1[7905], 0, 33U * sizeof(real_T));
    SD->f0.dv1[7938] = 1.0;
    memset(&SD->f0.dv1[7939], 0, 41U * sizeof(real_T));
    SD->f0.dv1[7980] = -qo[3];
    memset(&SD->f0.dv1[7981], 0, 170U * sizeof(real_T));
    SD->f0.dv1[8151] = -1.0;
    memset(&SD->f0.dv1[8152], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8185] = 1.0;
    memset(&SD->f0.dv1[8186], 0, 41U * sizeof(real_T));
    SD->f0.dv1[8227] = -qo[3];
    memset(&SD->f0.dv1[8228], 0, 136U * sizeof(real_T));
    SD->f0.dv1[8364] = 1.0;
    memset(&SD->f0.dv1[8365], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8398] = -1.0;
    memset(&SD->f0.dv1[8399], 0, 75U * sizeof(real_T));
    SD->f0.dv1[8474] = 1.0;
    SD->f0.dv1[8475] = 0.0;
    SD->f0.dv1[8476] = 0.0;
    SD->f0.dv1[8477] = -1.0;
    memset(&SD->f0.dv1[8478], 0, 10U * sizeof(real_T));
    SD->f0.dv1[8488] = 1.0;
    memset(&SD->f0.dv1[8489], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8522] = -1.0;
    memset(&SD->f0.dv1[8523], 0, 75U * sizeof(real_T));
    SD->f0.dv1[8598] = 1.0;
    SD->f0.dv1[8599] = 0.0;
    SD->f0.dv1[8600] = 0.0;
    SD->f0.dv1[8601] = -1.0;
    memset(&SD->f0.dv1[8602], 0, 10U * sizeof(real_T));
    SD->f0.dv1[8612] = 1.0;
    memset(&SD->f0.dv1[8613], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8646] = -1.0;
    memset(&SD->f0.dv1[8647], 0, 75U * sizeof(real_T));
    SD->f0.dv1[8722] = 1.0;
    SD->f0.dv1[8723] = 0.0;
    SD->f0.dv1[8724] = 0.0;
    SD->f0.dv1[8725] = -1.0;
    memset(&SD->f0.dv1[8726], 0, 10U * sizeof(real_T));
    SD->f0.dv1[8736] = 1.0;
    memset(&SD->f0.dv1[8737], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8770] = -1.0;
    memset(&SD->f0.dv1[8771], 0, 89U * sizeof(real_T));
    SD->f0.dv1[8860] = 1.0;
    memset(&SD->f0.dv1[8861], 0, 33U * sizeof(real_T));
    SD->f0.dv1[8894] = -1.0;
    memset(&SD->f0.dv1[8895], 0, 89U * sizeof(real_T));
    SD->f0.dv1[8984] = 1.0;
    memset(&SD->f0.dv1[8985], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9018] = -1.0;
    memset(&SD->f0.dv1[9019], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9108] = 1.0;
    memset(&SD->f0.dv1[9109], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9142] = -1.0;
    memset(&SD->f0.dv1[9143], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9232] = 1.0;
    memset(&SD->f0.dv1[9233], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9266] = -1.0;
    memset(&SD->f0.dv1[9267], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9356] = 1.0;
    memset(&SD->f0.dv1[9357], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9390] = -1.0;
    memset(&SD->f0.dv1[9391], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9480] = 1.0;
    memset(&SD->f0.dv1[9481], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9514] = -1.0;
    memset(&SD->f0.dv1[9515], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9604] = 1.0;
    memset(&SD->f0.dv1[9605], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9638] = -1.0;
    memset(&SD->f0.dv1[9639], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9728] = 1.0;
    memset(&SD->f0.dv1[9729], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9762] = -1.0;
    memset(&SD->f0.dv1[9763], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9852] = 1.0;
    memset(&SD->f0.dv1[9853], 0, 33U * sizeof(real_T));
    SD->f0.dv1[9886] = -1.0;
    memset(&SD->f0.dv1[9887], 0, 89U * sizeof(real_T));
    SD->f0.dv1[9976] = 1.0;
    memset(&SD->f0.dv1[9977], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10010] = -1.0;
    memset(&SD->f0.dv1[10011], 0, 89U * sizeof(real_T));
    SD->f0.dv1[10100] = 1.0;
    memset(&SD->f0.dv1[10101], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10134] = -1.0;
    memset(&SD->f0.dv1[10135], 0, 89U * sizeof(real_T));
    SD->f0.dv1[10224] = 1.0;
    memset(&SD->f0.dv1[10225], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10258] = -1.0;
    memset(&SD->f0.dv1[10259], 0, 89U * sizeof(real_T));
    SD->f0.dv1[10348] = 1.0;
    memset(&SD->f0.dv1[10349], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10382] = -1.0;
    memset(&SD->f0.dv1[10383], 0, 89U * sizeof(real_T));
    SD->f0.dv1[10472] = 1.0;
    memset(&SD->f0.dv1[10473], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10506] = -1.0;
    memset(&SD->f0.dv1[10507], 0, sizeof(real_T) << 6);
    SD->f0.dv1[10571] = 1.0;
    SD->f0.dv1[10572] = 0.0;
    SD->f0.dv1[10573] = 0.0;
    SD->f0.dv1[10574] = -1.0;
    memset(&SD->f0.dv1[10575], 0, 21U * sizeof(real_T));
    SD->f0.dv1[10596] = 1.0;
    memset(&SD->f0.dv1[10597], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10630] = -1.0;
    memset(&SD->f0.dv1[10631], 0, sizeof(real_T) << 6);
    SD->f0.dv1[10695] = 1.0;
    SD->f0.dv1[10696] = 0.0;
    SD->f0.dv1[10697] = 0.0;
    SD->f0.dv1[10698] = -1.0;
    memset(&SD->f0.dv1[10699], 0, 21U * sizeof(real_T));
    SD->f0.dv1[10720] = 1.0;
    memset(&SD->f0.dv1[10721], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10754] = -1.0;
    memset(&SD->f0.dv1[10755], 0, sizeof(real_T) << 6);
    SD->f0.dv1[10819] = 1.0;
    SD->f0.dv1[10820] = 0.0;
    SD->f0.dv1[10821] = 0.0;
    SD->f0.dv1[10822] = -1.0;
    memset(&SD->f0.dv1[10823], 0, 21U * sizeof(real_T));
    SD->f0.dv1[10844] = 1.0;
    memset(&SD->f0.dv1[10845], 0, 33U * sizeof(real_T));
    SD->f0.dv1[10878] = -1.0;
    memset(&SD->f0.dv1[10879], 0, 89U * sizeof(real_T));
    SD->f0.dv1[10968] = 1.0;
    memset(&SD->f0.dv1[10969], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11002] = -1.0;
    memset(&SD->f0.dv1[11003], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11092] = 1.0;
    memset(&SD->f0.dv1[11093], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11126] = -1.0;
    memset(&SD->f0.dv1[11127], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11216] = 1.0;
    memset(&SD->f0.dv1[11217], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11250] = -1.0;
    memset(&SD->f0.dv1[11251], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11340] = 1.0;
    memset(&SD->f0.dv1[11341], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11374] = -1.0;
    memset(&SD->f0.dv1[11375], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11464] = 1.0;
    memset(&SD->f0.dv1[11465], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11498] = -1.0;
    memset(&SD->f0.dv1[11499], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11588] = 1.0;
    memset(&SD->f0.dv1[11589], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11622] = -1.0;
    memset(&SD->f0.dv1[11623], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11712] = 1.0;
    memset(&SD->f0.dv1[11713], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11746] = -1.0;
    memset(&SD->f0.dv1[11747], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11836] = 1.0;
    memset(&SD->f0.dv1[11837], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11870] = -1.0;
    memset(&SD->f0.dv1[11871], 0, 89U * sizeof(real_T));
    SD->f0.dv1[11960] = 1.0;
    memset(&SD->f0.dv1[11961], 0, 33U * sizeof(real_T));
    SD->f0.dv1[11994] = -1.0;
    memset(&SD->f0.dv1[11995], 0, 89U * sizeof(real_T));
    SD->f0.dv1[12084] = 1.0;
    memset(&SD->f0.dv1[12085], 0, 33U * sizeof(real_T));
    SD->f0.dv1[12118] = -1.0;
    memset(&SD->f0.dv1[12119], 0, 89U * sizeof(real_T));
    SD->f0.dv1[12208] = 1.0;
    memset(&SD->f0.dv1[12209], 0, 33U * sizeof(real_T));
    SD->f0.dv1[12242] = -1.0;
    memset(&SD->f0.dv1[12243], 0, 89U * sizeof(real_T));
    SD->f0.dv1[12332] = 1.0;
    memset(&SD->f0.dv1[12333], 0, 33U * sizeof(real_T));
    SD->f0.dv1[12366] = -1.0;
    memset(&SD->f0.dv1[12367], 0, 89U * sizeof(real_T));
    SD->f0.dv1[12456] = 1.0;
    memset(&SD->f0.dv1[12457], 0, 33U * sizeof(real_T));
    SD->f0.dv1[12490] = -1.0;
    memset(&SD->f0.dv1[12491], 0, 669U * sizeof(real_T));
    SD->f0.dv1[13160] = -1.0;
    memset(&SD->f0.dv1[13161], 0, 445U * sizeof(real_T));
    SD->f0.dv1[13606] = -1.0;
    memset(&SD->f0.dv1[13607], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13623] = -1.0;
    memset(&SD->f0.dv1[13624], 0, 106U * sizeof(real_T));
    SD->f0.dv1[13730] = -1.0;
    memset(&SD->f0.dv1[13731], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13747] = -1.0;
    memset(&SD->f0.dv1[13748], 0, 106U * sizeof(real_T));
    SD->f0.dv1[13854] = -1.0;
    memset(&SD->f0.dv1[13855], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13871] = -1.0;
    memset(&SD->f0.dv1[13872], 0, 106U * sizeof(real_T));
    SD->f0.dv1[13978] = -1.0;
    memset(&SD->f0.dv1[13979], 0, sizeof(real_T) << 4);
    SD->f0.dv1[13995] = -1.0;
    memset(&SD->f0.dv1[13996], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14102] = -1.0;
    memset(&SD->f0.dv1[14103], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14119] = -1.0;
    memset(&SD->f0.dv1[14120], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14226] = -1.0;
    memset(&SD->f0.dv1[14227], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14243] = -1.0;
    memset(&SD->f0.dv1[14244], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14350] = -1.0;
    memset(&SD->f0.dv1[14351], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14367] = -1.0;
    memset(&SD->f0.dv1[14368], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14474] = -1.0;
    memset(&SD->f0.dv1[14475], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14491] = -1.0;
    memset(&SD->f0.dv1[14492], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14598] = -1.0;
    memset(&SD->f0.dv1[14599], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14615] = -1.0;
    memset(&SD->f0.dv1[14616], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14722] = -1.0;
    memset(&SD->f0.dv1[14723], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14739] = -1.0;
    memset(&SD->f0.dv1[14740], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14846] = -1.0;
    memset(&SD->f0.dv1[14847], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14863] = -1.0;
    memset(&SD->f0.dv1[14864], 0, 106U * sizeof(real_T));
    SD->f0.dv1[14970] = -1.0;
    memset(&SD->f0.dv1[14971], 0, sizeof(real_T) << 4);
    SD->f0.dv1[14987] = -1.0;
    memset(&SD->f0.dv1[14988], 0, 106U * sizeof(real_T));
    SD->f0.dv1[15094] = -1.0;
    memset(&SD->f0.dv1[15095], 0, sizeof(real_T) << 4);
    SD->f0.dv1[15111] = -1.0;
    memset(&SD->f0.dv1[15112], 0, 106U * sizeof(real_T));
    SD->f0.dv1[15218] = -1.0;
    memset(&SD->f0.dv1[15219], 0, sizeof(real_T) << 4);
    SD->f0.dv1[15235] = -1.0;
    memset(&SD->f0.dv1[15236], 0, 106U * sizeof(real_T));
    SD->f0.dv1[15342] = -1.0;
    memset(&SD->f0.dv1[15343], 0, sizeof(real_T) << 4);
    SD->f0.dv1[15359] = -1.0;
    memset(&SD->f0.dv1[15360], 0, 106U * sizeof(real_T));
    SD->f0.dv1[15466] = -1.0;
    memset(&SD->f0.dv1[15467], 0, sizeof(real_T) << 4);
    SD->f0.dv1[15483] = -1.0;
    memset(&SD->f0.dv1[15484], 0, 106U * sizeof(real_T));
    SD->f0.dv1[15590] = -1.0;
    memset(&SD->f0.dv1[15591], 0, sizeof(real_T) << 4);
    SD->f0.dv1[15607] = -1.0;
    memset(&SD->f0.dv1[15608], 0, 135U * sizeof(real_T));
    SD->f0.dv1[15743] = 1.0;
    memset(&SD->f0.dv1[15744], 0, 2078U * sizeof(real_T));
    SD->f0.dv1[17822] = -1.0;
    SD->f0.dv1[17823] = 0.0;
    SD->f0.dv1[17824] = 0.0;
    SD->f0.dv1[17825] = -1.0;
    memset(&SD->f0.dv1[17826], 0, 120U * sizeof(real_T));
    SD->f0.dv1[17946] = -1.0;
    SD->f0.dv1[17947] = 0.0;
    SD->f0.dv1[17948] = 0.0;
    SD->f0.dv1[17949] = -1.0;
    memset(&SD->f0.dv1[17950], 0, 120U * sizeof(real_T));
    SD->f0.dv1[18070] = -1.0;
    SD->f0.dv1[18071] = 0.0;
    SD->f0.dv1[18072] = 0.0;
    SD->f0.dv1[18073] = -1.0;
    memset(&SD->f0.dv1[18074], 0, 246U * sizeof(real_T));
    SD->f0.dv1[18320] = -1.0;
    SD->f0.dv1[18321] = 0.0;
    SD->f0.dv1[18322] = 0.0;
    SD->f0.dv1[18323] = -1.0;
    memset(&SD->f0.dv1[18324], 0, 120U * sizeof(real_T));
    SD->f0.dv1[18444] = -1.0;
    SD->f0.dv1[18445] = 0.0;
    SD->f0.dv1[18446] = 0.0;
    SD->f0.dv1[18447] = -1.0;
    memset(&SD->f0.dv1[18448], 0, 120U * sizeof(real_T));
    SD->f0.dv1[18568] = -1.0;
    SD->f0.dv1[18569] = 0.0;
    SD->f0.dv1[18570] = 0.0;
    SD->f0.dv1[18571] = -1.0;
    memset(&SD->f0.dv1[18572], 0, 1108U * sizeof(real_T));
    for (i0 = 0; i0 < 160; i0++) {
      memcpy(&Aiq[i0 * 123], &SD->f0.dv1[i0 * 123], 123U * sizeof(real_T));
    }

    t2 = muDoubleScalarAbs(Obs_Info[2]);
    t3 = muDoubleScalarAbs(Obs_Info[3]);
    t7 = 1.0 / muDoubleScalarSqrt(t2 * t2 + t3 * t3);
    t2 = muDoubleScalarAbs(qo[2]);
    t9 = muDoubleScalarAbs(qo[3]);
    t13 = 1.0 / muDoubleScalarSqrt(t2 * t2 + t9 * t9);
    t14 = states[4] + foot_info[0];
    t15 = -states[4] + foot_info[0];
    t16 = states[5] + foot_info[3];
    t2 = -states[5] + foot_info[3];
    biq[0] = foot_info[6];
    biq[1] = foot_info[6];
    biq[2] = foot_info[6];
    biq[3] = foot_info[6];
    biq[4] = foot_info[6];
    biq[5] = foot_info[6];
    biq[6] = foot_info[6];
    biq[7] = foot_info[6];
    biq[8] = foot_info[6];
    biq[9] = foot_info[6];
    biq[10] = foot_info[6];
    biq[11] = foot_info[6];
    biq[12] = foot_info[6];
    biq[13] = foot_info[6];
    biq[14] = foot_info[6];
    biq[15] = foot_info[6];
    biq[16] = foot_info[6];
    biq[17] = foot_info[7];
    biq[18] = foot_info[7];
    biq[19] = foot_info[7];
    biq[20] = foot_info[7];
    biq[21] = foot_info[7];
    biq[22] = foot_info[7];
    biq[23] = foot_info[7];
    biq[24] = foot_info[7];
    biq[25] = foot_info[7];
    biq[26] = foot_info[7];
    biq[27] = foot_info[7];
    biq[28] = foot_info[7];
    biq[29] = foot_info[7];
    biq[30] = foot_info[7];
    biq[31] = foot_info[7];
    biq[32] = foot_info[7];
    biq[33] = foot_info[7];
    biq[34] = foot_info[6];
    biq[35] = foot_info[6];
    biq[36] = foot_info[6];
    biq[37] = foot_info[6];
    biq[38] = foot_info[6];
    biq[39] = foot_info[6];
    biq[40] = foot_info[6];
    biq[41] = foot_info[6];
    biq[42] = foot_info[6];
    biq[43] = foot_info[6];
    biq[44] = foot_info[6];
    biq[45] = foot_info[6];
    biq[46] = foot_info[6];
    biq[47] = foot_info[6];
    biq[48] = foot_info[6];
    biq[49] = foot_info[6];
    biq[50] = foot_info[6];
    biq[51] = foot_info[7];
    biq[52] = foot_info[7];
    biq[53] = foot_info[7];
    biq[54] = foot_info[7];
    biq[55] = foot_info[7];
    biq[56] = foot_info[7];
    biq[57] = foot_info[7];
    biq[58] = foot_info[7];
    biq[59] = foot_info[7];
    biq[60] = foot_info[7];
    biq[61] = foot_info[7];
    biq[62] = foot_info[7];
    biq[63] = foot_info[7];
    biq[64] = foot_info[7];
    biq[65] = foot_info[7];
    biq[66] = foot_info[7];
    biq[67] = foot_info[7];
    biq[68] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[0] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[0] * t7);
    biq[69] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0]] *
      t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]] *
      t7);
    biq[70] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] <<
      1] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      << 1] * t7);
    biq[71] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      3] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 3] * t7);
    biq[72] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] <<
      2] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      << 2] * t7);
    biq[73] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      5] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 5] * t7);
    biq[74] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      6] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 6] * t7);
    biq[75] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r1->data[r1->size[0] *
      7] * t7) - Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r1->data[r1->size[0]
      * 7] * t7);
    memset(&biq[76], 0, 17U * sizeof(real_T));
    biq[93] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[0] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[0] * t7);
    biq[94] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[1] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[1] * t7);
    biq[95] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[2] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[2] * t7);
    biq[96] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[3] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[3] * t7);
    biq[97] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[4] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[4] * t7);
    biq[98] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[5] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[5] * t7);
    biq[99] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[6] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[6] * t7);
    biq[100] = -Obs_Info[2] * (Obs_Info[0] + Obs_Info[2] * r2[7] * t7) -
      Obs_Info[3] * (Obs_Info[1] + Obs_Info[3] * r2[7] * t7);
    biq[101] = -qo[2] * (qo[0] + r2[8] * t13 * qo[2]) - qo[3] * (qo[1] + r2[8] *
      t13 * qo[3]);
    biq[102] = -qo[2] * (qo[0] + r2[9] * t13 * qo[2]) - qo[3] * (qo[1] + r2[9] *
      t13 * qo[3]);
    biq[103] = -qo[2] * (qo[0] + r2[10] * t13 * qo[2]) - qo[3] * (qo[1] + r2[10]
      * t13 * qo[3]);
    biq[104] = -qo[2] * (qo[0] + r2[11] * t13 * qo[2]) - qo[3] * (qo[1] + r2[11]
      * t13 * qo[3]);
    biq[105] = -qo[2] * (qo[0] + r2[12] * t13 * qo[2]) - qo[3] * (qo[1] + r2[12]
      * t13 * qo[3]);
    biq[106] = -qo[2] * (qo[0] + r2[13] * t13 * qo[2]) - qo[3] * (qo[1] + r2[13]
      * t13 * qo[3]);
    biq[107] = -qo[2] * (qo[0] + r2[14] * t13 * qo[2]) - qo[3] * (qo[1] + r2[14]
      * t13 * qo[3]);
    biq[108] = -qo[2] * (qo[0] + r2[15] * t13 * qo[2]) - qo[3] * (qo[1] + r2[15]
      * t13 * qo[3]);
    biq[109] = -qo[2] * (qo[0] + r2[16] * t13 * qo[2]) - qo[3] * (qo[1] + r2[16]
      * t13 * qo[3]);
    biq[110] = t14;
    biq[111] = t14;
    biq[112] = t14;
    biq[113] = t15;
    biq[114] = t15;
    biq[115] = t15;
    biq[116] = t16;
    biq[117] = t16;
    biq[118] = t16;
    biq[119] = t2;
    biq[120] = t2;
    biq[121] = t2;
    biq[122] = -foot_info[4];

    /*  Develop The Objective Function Matrix and Vector */
    /* OBJFAST_RIGHTSTART1V20 */
    /*     [H,F] = OBJFAST_RIGHTSTART1V20(CPX1,CPY1,IN3,IN4,IN5,IN6,CRX1,CRY1,CWX1,IN10,M1,IN12) */
    /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
    /*     06-Aug-2023 21:20:18 */
    t2 = weights[1] * 2.0;
    t3 = weights[2] * 2.0;
    t4 = weights[3] * 2.0;
    t5 = weights[4] * 2.0;
    t6 = weights[5] * 2.0;
    t7 = weights[6] * 2.0;
    t8 = weights[5] * 20.0;
    t9 = weights[5] * 12.0;
    t10 = weights[5] * 4.0;
    t11 = weights[6] * 20.0;
    t12 = weights[6] * 12.0;
    t13 = weights[6] * 4.0;
    t14 = weights[0] * 2.0;
    t15 = weights[7] * 2.0;
    t16 = weights[9] * 2.0;
    SD->f0.t2[0] = t2;
    memset(&SD->f0.t2[1], 0, 321U * sizeof(real_T));
    SD->f0.t2[322] = t2;
    memset(&SD->f0.t2[323], 0, 321U * sizeof(real_T));
    SD->f0.t2[644] = t2;
    memset(&SD->f0.t2[645], 0, 321U * sizeof(real_T));
    SD->f0.t2[966] = t2;
    memset(&SD->f0.t2[967], 0, 160U * sizeof(real_T));
    SD->f0.t2[1127] = t3;
    memset(&SD->f0.t2[1128], 0, 160U * sizeof(real_T));
    SD->f0.t2[1288] = t2;
    memset(&SD->f0.t2[1289], 0, 321U * sizeof(real_T));
    SD->f0.t2[1610] = t2;
    memset(&SD->f0.t2[1611], 0, 321U * sizeof(real_T));
    SD->f0.t2[1932] = t2;
    memset(&SD->f0.t2[1933], 0, 321U * sizeof(real_T));
    SD->f0.t2[2254] = t2;
    memset(&SD->f0.t2[2255], 0, 160U * sizeof(real_T));
    SD->f0.t2[2415] = t3;
    memset(&SD->f0.t2[2416], 0, 160U * sizeof(real_T));
    SD->f0.t2[2576] = t2;
    memset(&SD->f0.t2[2577], 0, 321U * sizeof(real_T));
    SD->f0.t2[2898] = t2;
    memset(&SD->f0.t2[2899], 0, 321U * sizeof(real_T));
    SD->f0.t2[3220] = t2;
    memset(&SD->f0.t2[3221], 0, 321U * sizeof(real_T));
    SD->f0.t2[3542] = t2;
    memset(&SD->f0.t2[3543], 0, 160U * sizeof(real_T));
    SD->f0.t2[3703] = t3;
    memset(&SD->f0.t2[3704], 0, 160U * sizeof(real_T));
    SD->f0.t2[3864] = t2;
    memset(&SD->f0.t2[3865], 0, 321U * sizeof(real_T));
    SD->f0.t2[4186] = t2;
    memset(&SD->f0.t2[4187], 0, 321U * sizeof(real_T));
    SD->f0.t2[4508] = t2;
    memset(&SD->f0.t2[4509], 0, 321U * sizeof(real_T));
    SD->f0.t2[4830] = t2;
    memset(&SD->f0.t2[4831], 0, 160U * sizeof(real_T));
    SD->f0.t2[4991] = t3;
    memset(&SD->f0.t2[4992], 0, 160U * sizeof(real_T));
    SD->f0.t2[5152] = t2;
    memset(&SD->f0.t2[5153], 0, 321U * sizeof(real_T));
    SD->f0.t2[5474] = t4;
    memset(&SD->f0.t2[5475], 0, 321U * sizeof(real_T));
    SD->f0.t2[5796] = t4;
    memset(&SD->f0.t2[5797], 0, 321U * sizeof(real_T));
    SD->f0.t2[6118] = t4;
    memset(&SD->f0.t2[6119], 0, 321U * sizeof(real_T));
    SD->f0.t2[6440] = t4;
    memset(&SD->f0.t2[6441], 0, 160U * sizeof(real_T));
    SD->f0.t2[6601] = t5;
    memset(&SD->f0.t2[6602], 0, 160U * sizeof(real_T));
    SD->f0.t2[6762] = t4;
    memset(&SD->f0.t2[6763], 0, 321U * sizeof(real_T));
    SD->f0.t2[7084] = t4;
    memset(&SD->f0.t2[7085], 0, 321U * sizeof(real_T));
    SD->f0.t2[7406] = t4;
    memset(&SD->f0.t2[7407], 0, 321U * sizeof(real_T));
    SD->f0.t2[7728] = t4;
    memset(&SD->f0.t2[7729], 0, 160U * sizeof(real_T));
    SD->f0.t2[7889] = t5;
    memset(&SD->f0.t2[7890], 0, 160U * sizeof(real_T));
    SD->f0.t2[8050] = t4;
    memset(&SD->f0.t2[8051], 0, 321U * sizeof(real_T));
    SD->f0.t2[8372] = t4;
    memset(&SD->f0.t2[8373], 0, 321U * sizeof(real_T));
    SD->f0.t2[8694] = t4;
    memset(&SD->f0.t2[8695], 0, 321U * sizeof(real_T));
    SD->f0.t2[9016] = t4;
    memset(&SD->f0.t2[9017], 0, 160U * sizeof(real_T));
    SD->f0.t2[9177] = t5;
    memset(&SD->f0.t2[9178], 0, 160U * sizeof(real_T));
    SD->f0.t2[9338] = t4;
    memset(&SD->f0.t2[9339], 0, 321U * sizeof(real_T));
    SD->f0.t2[9660] = t4;
    memset(&SD->f0.t2[9661], 0, 321U * sizeof(real_T));
    SD->f0.t2[9982] = t4;
    memset(&SD->f0.t2[9983], 0, 321U * sizeof(real_T));
    SD->f0.t2[10304] = t4;
    memset(&SD->f0.t2[10305], 0, 160U * sizeof(real_T));
    SD->f0.t2[10465] = t5;
    memset(&SD->f0.t2[10466], 0, 160U * sizeof(real_T));
    SD->f0.t2[10626] = t4;
    memset(&SD->f0.t2[10627], 0, 804U * sizeof(real_T));
    SD->f0.t2[11431] = t6;
    memset(&SD->f0.t2[11432], 0, 30U * sizeof(real_T));
    SD->f0.t2[11462] = -t6;
    memset(&SD->f0.t2[11463], 0, 129U * sizeof(real_T));
    SD->f0.t2[11592] = t6;
    memset(&SD->f0.t2[11593], 0, 29U * sizeof(real_T));
    SD->f0.t2[11622] = -t6;
    memset(&SD->f0.t2[11623], 0, 130U * sizeof(real_T));
    SD->f0.t2[11753] = t6;
    memset(&SD->f0.t2[11754], 0, 28U * sizeof(real_T));
    SD->f0.t2[11782] = -t6;
    memset(&SD->f0.t2[11783], 0, 131U * sizeof(real_T));
    SD->f0.t2[11914] = t6;
    memset(&SD->f0.t2[11915], 0, 27U * sizeof(real_T));
    SD->f0.t2[11942] = -t6;
    memset(&SD->f0.t2[11943], 0, 132U * sizeof(real_T));
    SD->f0.t2[12075] = t6;
    memset(&SD->f0.t2[12076], 0, 26U * sizeof(real_T));
    SD->f0.t2[12102] = -t6;
    SD->f0.t2[12103] = -t6;
    memset(&SD->f0.t2[12104], 0, 132U * sizeof(real_T));
    SD->f0.t2[12236] = t6;
    memset(&SD->f0.t2[12237], 0, 25U * sizeof(real_T));
    SD->f0.t2[12262] = -t6;
    SD->f0.t2[12263] = -t6;
    memset(&SD->f0.t2[12264], 0, 133U * sizeof(real_T));
    SD->f0.t2[12397] = t6;
    memset(&SD->f0.t2[12398], 0, 24U * sizeof(real_T));
    SD->f0.t2[12422] = -t6;
    SD->f0.t2[12423] = -t6;
    memset(&SD->f0.t2[12424], 0, 134U * sizeof(real_T));
    SD->f0.t2[12558] = t6;
    memset(&SD->f0.t2[12559], 0, 23U * sizeof(real_T));
    SD->f0.t2[12582] = -t6;
    SD->f0.t2[12583] = -t6;
    memset(&SD->f0.t2[12584], 0, 135U * sizeof(real_T));
    SD->f0.t2[12719] = t6;
    memset(&SD->f0.t2[12720], 0, 22U * sizeof(real_T));
    SD->f0.t2[12742] = -t6;
    SD->f0.t2[12743] = -t6;
    SD->f0.t2[12744] = -t6;
    memset(&SD->f0.t2[12745], 0, 135U * sizeof(real_T));
    SD->f0.t2[12880] = t6;
    memset(&SD->f0.t2[12881], 0, 21U * sizeof(real_T));
    SD->f0.t2[12902] = -t6;
    SD->f0.t2[12903] = -t6;
    SD->f0.t2[12904] = -t6;
    memset(&SD->f0.t2[12905], 0, 136U * sizeof(real_T));
    SD->f0.t2[13041] = t6;
    memset(&SD->f0.t2[13042], 0, 20U * sizeof(real_T));
    SD->f0.t2[13062] = -t6;
    SD->f0.t2[13063] = -t6;
    SD->f0.t2[13064] = -t6;
    memset(&SD->f0.t2[13065], 0, 137U * sizeof(real_T));
    SD->f0.t2[13202] = t6;
    memset(&SD->f0.t2[13203], 0, 19U * sizeof(real_T));
    SD->f0.t2[13222] = -t6;
    SD->f0.t2[13223] = -t6;
    SD->f0.t2[13224] = -t6;
    memset(&SD->f0.t2[13225], 0, 138U * sizeof(real_T));
    SD->f0.t2[13363] = t6;
    memset(&SD->f0.t2[13364], 0, 18U * sizeof(real_T));
    SD->f0.t2[13382] = -t6;
    SD->f0.t2[13383] = -t6;
    SD->f0.t2[13384] = -t6;
    SD->f0.t2[13385] = -t6;
    memset(&SD->f0.t2[13386], 0, 138U * sizeof(real_T));
    SD->f0.t2[13524] = t6;
    memset(&SD->f0.t2[13525], 0, 17U * sizeof(real_T));
    SD->f0.t2[13542] = -t6;
    SD->f0.t2[13543] = -t6;
    SD->f0.t2[13544] = -t6;
    SD->f0.t2[13545] = -t6;
    memset(&SD->f0.t2[13546], 0, 622U * sizeof(real_T));
    SD->f0.t2[14168] = t7;
    memset(&SD->f0.t2[14169], 0, 17U * sizeof(real_T));
    SD->f0.t2[14186] = -t7;
    memset(&SD->f0.t2[14187], 0, 142U * sizeof(real_T));
    SD->f0.t2[14329] = t7;
    memset(&SD->f0.t2[14330], 0, sizeof(real_T) << 4);
    SD->f0.t2[14346] = -t7;
    memset(&SD->f0.t2[14347], 0, 143U * sizeof(real_T));
    SD->f0.t2[14490] = t7;
    memset(&SD->f0.t2[14491], 0, 15U * sizeof(real_T));
    SD->f0.t2[14506] = -t7;
    memset(&SD->f0.t2[14507], 0, 144U * sizeof(real_T));
    SD->f0.t2[14651] = t7;
    memset(&SD->f0.t2[14652], 0, 14U * sizeof(real_T));
    SD->f0.t2[14666] = -t7;
    memset(&SD->f0.t2[14667], 0, 145U * sizeof(real_T));
    SD->f0.t2[14812] = t7;
    memset(&SD->f0.t2[14813], 0, 13U * sizeof(real_T));
    SD->f0.t2[14826] = -t7;
    SD->f0.t2[14827] = -t7;
    memset(&SD->f0.t2[14828], 0, 145U * sizeof(real_T));
    SD->f0.t2[14973] = t7;
    memset(&SD->f0.t2[14974], 0, 12U * sizeof(real_T));
    SD->f0.t2[14986] = -t7;
    SD->f0.t2[14987] = -t7;
    memset(&SD->f0.t2[14988], 0, 146U * sizeof(real_T));
    SD->f0.t2[15134] = t7;
    memset(&SD->f0.t2[15135], 0, 11U * sizeof(real_T));
    SD->f0.t2[15146] = -t7;
    SD->f0.t2[15147] = -t7;
    memset(&SD->f0.t2[15148], 0, 147U * sizeof(real_T));
    SD->f0.t2[15295] = t7;
    memset(&SD->f0.t2[15296], 0, 10U * sizeof(real_T));
    SD->f0.t2[15306] = -t7;
    SD->f0.t2[15307] = -t7;
    memset(&SD->f0.t2[15308], 0, 148U * sizeof(real_T));
    SD->f0.t2[15456] = t7;
    memset(&SD->f0.t2[15457], 0, 9U * sizeof(real_T));
    SD->f0.t2[15466] = -t7;
    SD->f0.t2[15467] = -t7;
    SD->f0.t2[15468] = -t7;
    memset(&SD->f0.t2[15469], 0, 148U * sizeof(real_T));
    SD->f0.t2[15617] = t7;
    memset(&SD->f0.t2[15618], 0, sizeof(real_T) << 3);
    SD->f0.t2[15626] = -t7;
    SD->f0.t2[15627] = -t7;
    SD->f0.t2[15628] = -t7;
    memset(&SD->f0.t2[15629], 0, 149U * sizeof(real_T));
    SD->f0.t2[15778] = t7;
    SD->f0.t2[15779] = 0.0;
    SD->f0.t2[15780] = 0.0;
    SD->f0.t2[15781] = 0.0;
    SD->f0.t2[15782] = 0.0;
    SD->f0.t2[15783] = 0.0;
    SD->f0.t2[15784] = 0.0;
    SD->f0.t2[15785] = 0.0;
    SD->f0.t2[15786] = -t7;
    SD->f0.t2[15787] = -t7;
    SD->f0.t2[15788] = -t7;
    memset(&SD->f0.t2[15789], 0, 150U * sizeof(real_T));
    SD->f0.t2[15939] = t7;
    SD->f0.t2[15940] = 0.0;
    SD->f0.t2[15941] = 0.0;
    SD->f0.t2[15942] = 0.0;
    SD->f0.t2[15943] = 0.0;
    SD->f0.t2[15944] = 0.0;
    SD->f0.t2[15945] = 0.0;
    SD->f0.t2[15946] = -t7;
    SD->f0.t2[15947] = -t7;
    SD->f0.t2[15948] = -t7;
    memset(&SD->f0.t2[15949], 0, 151U * sizeof(real_T));
    SD->f0.t2[16100] = t7;
    SD->f0.t2[16101] = 0.0;
    SD->f0.t2[16102] = 0.0;
    SD->f0.t2[16103] = 0.0;
    SD->f0.t2[16104] = 0.0;
    SD->f0.t2[16105] = 0.0;
    SD->f0.t2[16106] = -t7;
    SD->f0.t2[16107] = -t7;
    SD->f0.t2[16108] = -t7;
    SD->f0.t2[16109] = -t7;
    memset(&SD->f0.t2[16110], 0, 151U * sizeof(real_T));
    SD->f0.t2[16261] = t7;
    SD->f0.t2[16262] = 0.0;
    SD->f0.t2[16263] = 0.0;
    SD->f0.t2[16264] = 0.0;
    SD->f0.t2[16265] = 0.0;
    SD->f0.t2[16266] = -t7;
    SD->f0.t2[16267] = -t7;
    SD->f0.t2[16268] = -t7;
    SD->f0.t2[16269] = -t7;
    memset(&SD->f0.t2[16270], 0, 121U * sizeof(real_T));
    SD->f0.t2[16391] = -t6;
    SD->f0.t2[16392] = -t6;
    SD->f0.t2[16393] = -t6;
    SD->f0.t2[16394] = -t6;
    SD->f0.t2[16395] = -t6;
    SD->f0.t2[16396] = -t6;
    SD->f0.t2[16397] = -t6;
    SD->f0.t2[16398] = -t6;
    SD->f0.t2[16399] = -t6;
    SD->f0.t2[16400] = -t6;
    SD->f0.t2[16401] = -t6;
    SD->f0.t2[16402] = -t6;
    SD->f0.t2[16403] = -t6;
    SD->f0.t2[16404] = -t6;
    memset(&SD->f0.t2[16405], 0, 17U * sizeof(real_T));
    SD->f0.t2[16422] = weights[5] * 28.0;
    SD->f0.t2[16423] = t8;
    SD->f0.t2[16424] = t9;
    SD->f0.t2[16425] = t10;
    memset(&SD->f0.t2[16426], 0, 129U * sizeof(real_T));
    SD->f0.t2[16555] = -t6;
    SD->f0.t2[16556] = -t6;
    SD->f0.t2[16557] = -t6;
    SD->f0.t2[16558] = -t6;
    SD->f0.t2[16559] = -t6;
    SD->f0.t2[16560] = -t6;
    SD->f0.t2[16561] = -t6;
    SD->f0.t2[16562] = -t6;
    SD->f0.t2[16563] = -t6;
    SD->f0.t2[16564] = -t6;
    memset(&SD->f0.t2[16565], 0, 17U * sizeof(real_T));
    SD->f0.t2[16582] = t8;
    SD->f0.t2[16583] = t8;
    SD->f0.t2[16584] = t9;
    SD->f0.t2[16585] = t10;
    memset(&SD->f0.t2[16586], 0, 133U * sizeof(real_T));
    SD->f0.t2[16719] = -t6;
    SD->f0.t2[16720] = -t6;
    SD->f0.t2[16721] = -t6;
    SD->f0.t2[16722] = -t6;
    SD->f0.t2[16723] = -t6;
    SD->f0.t2[16724] = -t6;
    memset(&SD->f0.t2[16725], 0, 17U * sizeof(real_T));
    SD->f0.t2[16742] = t9;
    SD->f0.t2[16743] = t9;
    SD->f0.t2[16744] = t9;
    SD->f0.t2[16745] = t10;
    memset(&SD->f0.t2[16746], 0, 137U * sizeof(real_T));
    SD->f0.t2[16883] = -t6;
    SD->f0.t2[16884] = -t6;
    memset(&SD->f0.t2[16885], 0, 17U * sizeof(real_T));
    SD->f0.t2[16902] = t10;
    SD->f0.t2[16903] = t10;
    SD->f0.t2[16904] = t10;
    SD->f0.t2[16905] = t10;
    memset(&SD->f0.t2[16906], 0, 142U * sizeof(real_T));
    SD->f0.t2[17048] = -t7;
    SD->f0.t2[17049] = -t7;
    SD->f0.t2[17050] = -t7;
    SD->f0.t2[17051] = -t7;
    SD->f0.t2[17052] = -t7;
    SD->f0.t2[17053] = -t7;
    SD->f0.t2[17054] = -t7;
    SD->f0.t2[17055] = -t7;
    SD->f0.t2[17056] = -t7;
    SD->f0.t2[17057] = -t7;
    SD->f0.t2[17058] = -t7;
    SD->f0.t2[17059] = -t7;
    SD->f0.t2[17060] = -t7;
    SD->f0.t2[17061] = -t7;
    SD->f0.t2[17062] = 0.0;
    SD->f0.t2[17063] = 0.0;
    SD->f0.t2[17064] = 0.0;
    SD->f0.t2[17065] = 0.0;
    SD->f0.t2[17066] = weights[6] * 28.0;
    SD->f0.t2[17067] = t11;
    SD->f0.t2[17068] = t12;
    SD->f0.t2[17069] = t13;
    memset(&SD->f0.t2[17070], 0, 142U * sizeof(real_T));
    SD->f0.t2[17212] = -t7;
    SD->f0.t2[17213] = -t7;
    SD->f0.t2[17214] = -t7;
    SD->f0.t2[17215] = -t7;
    SD->f0.t2[17216] = -t7;
    SD->f0.t2[17217] = -t7;
    SD->f0.t2[17218] = -t7;
    SD->f0.t2[17219] = -t7;
    SD->f0.t2[17220] = -t7;
    SD->f0.t2[17221] = -t7;
    SD->f0.t2[17222] = 0.0;
    SD->f0.t2[17223] = 0.0;
    SD->f0.t2[17224] = 0.0;
    SD->f0.t2[17225] = 0.0;
    SD->f0.t2[17226] = t11;
    SD->f0.t2[17227] = t11;
    SD->f0.t2[17228] = t12;
    SD->f0.t2[17229] = t13;
    memset(&SD->f0.t2[17230], 0, 146U * sizeof(real_T));
    SD->f0.t2[17376] = -t7;
    SD->f0.t2[17377] = -t7;
    SD->f0.t2[17378] = -t7;
    SD->f0.t2[17379] = -t7;
    SD->f0.t2[17380] = -t7;
    SD->f0.t2[17381] = -t7;
    SD->f0.t2[17382] = 0.0;
    SD->f0.t2[17383] = 0.0;
    SD->f0.t2[17384] = 0.0;
    SD->f0.t2[17385] = 0.0;
    SD->f0.t2[17386] = t12;
    SD->f0.t2[17387] = t12;
    SD->f0.t2[17388] = t12;
    SD->f0.t2[17389] = t13;
    memset(&SD->f0.t2[17390], 0, 150U * sizeof(real_T));
    SD->f0.t2[17540] = -t7;
    SD->f0.t2[17541] = -t7;
    SD->f0.t2[17542] = 0.0;
    SD->f0.t2[17543] = 0.0;
    SD->f0.t2[17544] = 0.0;
    SD->f0.t2[17545] = 0.0;
    SD->f0.t2[17546] = t13;
    SD->f0.t2[17547] = t13;
    SD->f0.t2[17548] = t13;
    SD->f0.t2[17549] = t13;
    memset(&SD->f0.t2[17550], 0, 160U * sizeof(real_T));
    SD->f0.t2[17710] = t14;
    memset(&SD->f0.t2[17711], 0, 160U * sizeof(real_T));
    SD->f0.t2[17871] = t14;
    memset(&SD->f0.t2[17872], 0, 160U * sizeof(real_T));
    SD->f0.t2[18032] = t14;
    memset(&SD->f0.t2[18033], 0, 160U * sizeof(real_T));
    SD->f0.t2[18193] = t14;
    memset(&SD->f0.t2[18194], 0, 160U * sizeof(real_T));
    SD->f0.t2[18354] = t14;
    memset(&SD->f0.t2[18355], 0, 160U * sizeof(real_T));
    SD->f0.t2[18515] = t14;
    memset(&SD->f0.t2[18516], 0, 160U * sizeof(real_T));
    SD->f0.t2[18676] = t14;
    memset(&SD->f0.t2[18677], 0, 160U * sizeof(real_T));
    SD->f0.t2[18837] = t14;
    memset(&SD->f0.t2[18838], 0, 160U * sizeof(real_T));
    SD->f0.t2[18998] = t14;
    memset(&SD->f0.t2[18999], 0, 160U * sizeof(real_T));
    SD->f0.t2[19159] = t14;
    memset(&SD->f0.t2[19160], 0, 160U * sizeof(real_T));
    SD->f0.t2[19320] = t14;
    memset(&SD->f0.t2[19321], 0, 160U * sizeof(real_T));
    SD->f0.t2[19481] = t14;
    memset(&SD->f0.t2[19482], 0, 160U * sizeof(real_T));
    SD->f0.t2[19642] = t14;
    memset(&SD->f0.t2[19643], 0, 160U * sizeof(real_T));
    SD->f0.t2[19803] = t14;
    memset(&SD->f0.t2[19804], 0, 160U * sizeof(real_T));
    SD->f0.t2[19964] = t14;
    memset(&SD->f0.t2[19965], 0, 160U * sizeof(real_T));
    SD->f0.t2[20125] = t14;
    memset(&SD->f0.t2[20126], 0, 160U * sizeof(real_T));
    SD->f0.t2[20286] = t14;
    memset(&SD->f0.t2[20287], 0, 160U * sizeof(real_T));
    SD->f0.t2[20447] = weights[8] * 2.0;
    memset(&SD->f0.t2[20448], 0, 2736U * sizeof(real_T));
    SD->f0.t2[23184] = t6;
    memset(&SD->f0.t2[23185], 0, 160U * sizeof(real_T));
    SD->f0.t2[23345] = t6;
    memset(&SD->f0.t2[23346], 0, 160U * sizeof(real_T));
    SD->f0.t2[23506] = t6;
    memset(&SD->f0.t2[23507], 0, 160U * sizeof(real_T));
    SD->f0.t2[23667] = t6;
    memset(&SD->f0.t2[23668], 0, 160U * sizeof(real_T));
    SD->f0.t2[23828] = t7;
    memset(&SD->f0.t2[23829], 0, 160U * sizeof(real_T));
    SD->f0.t2[23989] = t7;
    memset(&SD->f0.t2[23990], 0, 160U * sizeof(real_T));
    SD->f0.t2[24150] = t7;
    memset(&SD->f0.t2[24151], 0, 160U * sizeof(real_T));
    SD->f0.t2[24311] = t7;
    memset(&SD->f0.t2[24312], 0, 160U * sizeof(real_T));
    SD->f0.t2[24472] = t15;
    memset(&SD->f0.t2[24473], 0, 160U * sizeof(real_T));
    SD->f0.t2[24633] = t15;
    memset(&SD->f0.t2[24634], 0, 160U * sizeof(real_T));
    SD->f0.t2[24794] = t15;
    memset(&SD->f0.t2[24795], 0, 160U * sizeof(real_T));
    SD->f0.t2[24955] = t15;
    memset(&SD->f0.t2[24956], 0, 160U * sizeof(real_T));
    SD->f0.t2[25116] = t16;
    memset(&SD->f0.t2[25117], 0, 160U * sizeof(real_T));
    SD->f0.t2[25277] = t16;
    memset(&SD->f0.t2[25278], 0, 160U * sizeof(real_T));
    SD->f0.t2[25438] = t16;
    memset(&SD->f0.t2[25439], 0, 160U * sizeof(real_T));
    SD->f0.t2[25599] = t16;
    for (i0 = 0; i0 < 160; i0++) {
      memcpy(&H[i0 * 160], &SD->f0.t2[i0 * 160], 160U * sizeof(real_T));
    }

    f[0] = weights[1] * states_ref[0] * -2.0;
    f[1] = 0.0;
    f[2] = weights[1] * states_ref[0] * -2.0;
    f[3] = 0.0;
    f[4] = weights[1] * states_ref[0] * -2.0;
    f[5] = 0.0;
    f[6] = weights[1] * states_ref[0] * -2.0;
    f[7] = weights[2] * states_ref[1] * -2.0;
    f[8] = weights[1] * states_ref[0] * -2.0;
    f[9] = 0.0;
    f[10] = weights[1] * states_ref[0] * -2.0;
    f[11] = 0.0;
    f[12] = weights[1] * states_ref[0] * -2.0;
    f[13] = 0.0;
    f[14] = weights[1] * states_ref[0] * -2.0;
    f[15] = weights[2] * states_ref[2] * -2.0;
    f[16] = weights[1] * states_ref[0] * -2.0;
    f[17] = 0.0;
    f[18] = weights[1] * states_ref[0] * -2.0;
    f[19] = 0.0;
    f[20] = weights[1] * states_ref[0] * -2.0;
    f[21] = 0.0;
    f[22] = weights[1] * states_ref[0] * -2.0;
    f[23] = weights[2] * states_ref[3] * -2.0;
    f[24] = weights[1] * states_ref[0] * -2.0;
    f[25] = 0.0;
    f[26] = weights[1] * states_ref[0] * -2.0;
    f[27] = 0.0;
    f[28] = weights[1] * states_ref[0] * -2.0;
    f[29] = 0.0;
    f[30] = weights[1] * states_ref[0] * -2.0;
    f[31] = weights[2] * states_ref[4] * -2.0;
    f[32] = weights[1] * states_ref[0] * -2.0;
    f[33] = 0.0;
    f[34] = weights[3] * states_ref[5] * -2.0;
    f[35] = 0.0;
    f[36] = weights[3] * states_ref[5] * -2.0;
    f[37] = 0.0;
    f[38] = weights[3] * states_ref[5] * -2.0;
    f[39] = 0.0;
    f[40] = weights[3] * states_ref[5] * -2.0;
    f[41] = weights[4] * states_ref[6] * -2.0;
    f[42] = weights[3] * states_ref[5] * -2.0;
    f[43] = 0.0;
    f[44] = weights[3] * states_ref[5] * -2.0;
    f[45] = 0.0;
    f[46] = weights[3] * states_ref[5] * -2.0;
    f[47] = 0.0;
    f[48] = weights[3] * states_ref[5] * -2.0;
    f[49] = weights[4] * states_ref[7] * -2.0;
    f[50] = weights[3] * states_ref[5] * -2.0;
    f[51] = 0.0;
    f[52] = weights[3] * states_ref[5] * -2.0;
    f[53] = 0.0;
    f[54] = weights[3] * states_ref[5] * -2.0;
    f[55] = 0.0;
    f[56] = weights[3] * states_ref[5] * -2.0;
    f[57] = weights[4] * states_ref[8] * -2.0;
    f[58] = weights[3] * states_ref[5] * -2.0;
    f[59] = 0.0;
    f[60] = weights[3] * states_ref[5] * -2.0;
    f[61] = 0.0;
    f[62] = weights[3] * states_ref[5] * -2.0;
    f[63] = 0.0;
    f[64] = weights[3] * states_ref[5] * -2.0;
    f[65] = weights[4] * states_ref[9] * -2.0;
    f[66] = weights[3] * states_ref[5] * -2.0;
    f[67] = 0.0;
    f[68] = 0.0;
    f[69] = 0.0;
    f[70] = 0.0;
    f[71] = states[4] * weights[5] * -2.0;
    f[72] = states[4] * weights[5] * -2.0;
    f[73] = states[4] * weights[5] * -2.0;
    f[74] = states[4] * weights[5] * -2.0;
    f[75] = states[4] * weights[5] * -2.0;
    f[76] = states[4] * weights[5] * -2.0;
    f[77] = states[4] * weights[5] * -2.0;
    f[78] = states[4] * weights[5] * -2.0;
    f[79] = states[4] * weights[5] * -2.0;
    f[80] = states[4] * weights[5] * -2.0;
    f[81] = states[4] * weights[5] * -2.0;
    f[82] = states[4] * weights[5] * -2.0;
    f[83] = states[4] * weights[5] * -2.0;
    f[84] = states[4] * weights[5] * -2.0;
    f[85] = 0.0;
    f[86] = 0.0;
    f[87] = 0.0;
    f[88] = states[5] * weights[6] * -2.0;
    f[89] = states[5] * weights[6] * -2.0;
    f[90] = states[5] * weights[6] * -2.0;
    f[91] = states[5] * weights[6] * -2.0;
    f[92] = states[5] * weights[6] * -2.0;
    f[93] = states[5] * weights[6] * -2.0;
    f[94] = states[5] * weights[6] * -2.0;
    f[95] = states[5] * weights[6] * -2.0;
    f[96] = states[5] * weights[6] * -2.0;
    f[97] = states[5] * weights[6] * -2.0;
    f[98] = states[5] * weights[6] * -2.0;
    f[99] = states[5] * weights[6] * -2.0;
    f[100] = states[5] * weights[6] * -2.0;
    f[101] = states[5] * weights[6] * -2.0;
    f[102] = states[4] * weights[5] * 28.0;
    f[103] = states[4] * weights[5] * 20.0;
    f[104] = states[4] * weights[5] * 12.0;
    f[105] = states[4] * weights[5] * 4.0;
    f[106] = states[5] * weights[6] * 28.0;
    f[107] = states[5] * weights[6] * 20.0;
    f[108] = states[5] * weights[6] * 12.0;
    f[109] = states[5] * weights[6] * 4.0;
    memset(&f[110], 0, 50U * sizeof(real_T));
  }

  emxFree_real_T(&r1);
  emlrtHeapReferenceStackLeaveFcnR2012b(sp);
}

/* End of code generation (Fast_MPCV20_form_Step1.cpp) */
